//http://nah6.com/~itsme/cvs-xdadevtools/

// vim: ft=cpp sw=4 ts=4 et
/* (C) 2003-2008 Willem Jan Hengeveld <itsme@xs4all.nl>
 * 
 * Web: http://www.xs4all.nl/~itsme/projects/ida/
 */
#define UNLOADED_FILE   1
#include <idc.idc>

// this script searchs a windows ce kernel binary for 'CINFO' structs.
// and names the api's found 

// it also defines the KData struct,

// todo: locate list from
// c:/local/WINCE500/PRIVATE/WINCEOS/COREOS/NK/KERNEL/kmodeentries.cpp
static mkkdata() {
MakeName(0xFFFFC800, "kd_lpvTls");
MakeName(0xFFFFC804, "kd_ahSys_W32");
MakeName(0xFFFFC808, "kd_hCurThread");
MakeName(0xFFFFC80C, "kd_hCurProc");
MakeName(0xFFFFC810, "kd_ahSys_KW32");
MakeName(0xFFFFC884, "kd_bResched");
MakeName(0xFFFFC885, "kd_cNest");
MakeName(0xFFFFC886, "kd_bPowerOff");
MakeName(0xFFFFC887, "kd_bProfileOn");
MakeName(0xFFFFC888, "kd_unused");
MakeName(0xFFFFC88C, "kd_rsvd2");
MakeName(0xFFFFC890, "kd_pCurPrc");
MakeName(0xFFFFC894, "kd_pCurThd");
MakeName(0xFFFFC898, "kd_dwKCRes");
MakeName(0xFFFFC89C, "kd_handleBase");
MakeName(0xFFFFC8A0, "kd_aSections");
MakeName(0xFFFFC9A0, "kd_alpeIntrEvents");
MakeName(0xFFFFCA20, "kd_alpvIntrData");
MakeName(0xFFFFCAA0, "kd_pAPIReturn");
MakeName(0xFFFFCAA4, "kd_pMap");
MakeName(0xFFFFCAA8, "kd_dwInDebugger");
MakeName(0xFFFFCAAC, "kd_pCurFPUOwner");
MakeName(0xFFFFCAB0, "kd_pCpuASIDPrc");
MakeName(0xFFFFCAB4, "kd_nMemForPT");
MakeName(0xFFFFCAB8, "kd_alPad");
MakeName(0xFFFFCB00, "KINX_PROCARRAY");
MakeName(0xFFFFCB04, "KINX_PAGESIZE");
MakeName(0xFFFFCB08, "KINX_PFN_SHIFT");
MakeName(0xFFFFCB0C, "KINX_PFN_MASK");
MakeName(0xFFFFCB10, "KINX_PAGEFREE");
MakeName(0xFFFFCB14, "KINX_SYSPAGES");
MakeName(0xFFFFCB18, "KINX_KHEAP");
MakeName(0xFFFFCB1C, "KINX_SECTIONS");
MakeName(0xFFFFCB20, "KINX_MEMINFO");
MakeName(0xFFFFCB24, "KINX_MODULES");
MakeName(0xFFFFCB28, "KINX_DLL_LOW");
MakeName(0xFFFFCB2C, "KINX_NUMPAGES");
MakeName(0xFFFFCB30, "KINX_PTOC");
MakeName(0xFFFFCB34, "KINX_KDATA_ADDR");
MakeName(0xFFFFCB38, "KINX_GWESHEAPINFO");
MakeName(0xFFFFCB3C, "KINX_TIMEZONEBIAS");
MakeName(0xFFFFCB40, "KINX_PENDEVENTS");
MakeName(0xFFFFCB44, "KINX_KERNRESERVE");
MakeName(0xFFFFCB48, "KINX_API_MASK");
MakeName(0xFFFFCB4C, "KINX_NLS_CP");
MakeName(0xFFFFCB50, "KINX_NLS_SYSLOC");
MakeName(0xFFFFCB54, "KINX_NLS_USERLOC");
MakeName(0xFFFFCB58, "KINX_HEAP_WASTE");
MakeName(0xFFFFCB5C, "KINX_DEBUGGER");
MakeName(0xFFFFCB60, "KINX_APISETS");
MakeName(0xFFFFCB64, "KINX_MINPAGEFREE");
MakeName(0xFFFFCB68, "KINX_CELOGSTATUS");
MakeName(0xFFFFCB6C, "KINX_NKSECTION");
MakeName(0xFFFFCB70, "KINX_PWR_EVTS");
MakeName(0xFFFFCB74, "KINX_29");
MakeName(0xFFFFCB78, "KINX_30");
MakeName(0xFFFFCB7C, "KINX_NKSIG");

MakeName(0xFFFFCB80, "InterlockedPopList");
MakeName(0xFFFFCB98, "InterlockedPushList");
MakeName(0xFFFFCBAC, "InterlockedCompareExchange");
MakeName(0xFFFFCBC0, "InterlockedExchangeAdd");
MakeName(0xFFFFCBD4, "InterlockedExchange");

}
static CinfoName(ea)
{
    return form("%c%c%c%c", Byte(ea), Byte(ea+1), Byte(ea+2), Byte(ea+3));
}
static mkapi(ci, apinr, apiname)
{
    if (apinr<0 || apinr>=Word(ci+6)) {
        Message("ERROR: %s: apinr %d larger than max %d\n", CinfoName(ci), apinr, Word(ci+6));
        return;
    }
    MakeName(Dword(Dword(ci+8)+4*apinr), apiname);
}
static initcinfo(ci, name)
{
    MakeName(ci, form("cinfo_%s", name));
    MakeStructEx(ci, -1, "struc_CINFO");
    MakeName(Dword(ci+8), form("mth_%s", name));
    MakeName(Dword(ci+12), form("mthsig_%s", name));
}
static find_cinfo(name, disp, type)
{
    auto ci;
    ci= FindBinary(FirstSeg(), SEARCH_DOWN, 
            form("%02x %02x %02x %02x %02x %02x", 
                ord(substr(name, 0,1)), ord(substr(name, 1,2)), ord(substr(name, 2,3)), ord(substr(name, 3,4)), 
                disp, type));
    if (ci&3) {
        Message("ERROR: found %s not on word boundary: %08lx\n", name, ci);
        return BADADDR;
    }
    if (Dword(ci+8)==0)  {
        Message("ERROR: found %s without method list\n", name);
        return BADADDR;
    }
    Message("%08lx: found %s\n", ci, name);
    return ci;
}

// see c:/local/wince420/PRIVATE/WINCEOS/COREOS/NK/KERNEL/objdisp.c
// mk_APIS("APIS", 2, 6);
static mk_APIS(name, disp, type) {
    auto ci;
    ci= find_cinfo(name, disp, type);
    if (ci==BADADDR)
        return;

    initcinfo(ci, name);

    mkapi(ci, 0, "SC_APIS_CloseAPISet");
    mkapi(ci, 2, "SC_APIS_RegisterAPISet");
    mkapi(ci, 3, "SC_APIS_CreateAPIHandle");
    mkapi(ci, 4, "SC_APIS_VerifyAPIHandle");
}
// mk_Wn32("Wn32", 3, 0);
static mk_Wn32(name, disp, type) {
    auto ci;
    ci= find_cinfo(name, disp, type);
    if (ci==BADADDR)
        return;

    initcinfo(ci, name);

    mkapi(ci,   0, "SC_Wn32_Nop");
    mkapi(ci,   1, "SC_Wn32_NotSupported");
    mkapi(ci,   2, "SC_Wn32_CreateAPISet");
    mkapi(ci,   3, "SC_Wn32_EXT_VirtualAlloc");
    mkapi(ci,   4, "SC_Wn32_EXT_VirtualFree");
    mkapi(ci,   5, "SC_Wn32_EXT_VirtualProtect");
    mkapi(ci,   6, "SC_Wn32_EXT_VirtualQuery");
    mkapi(ci,   7, "SC_Wn32_VirtualCopy");
    mkapi(ci,   8, "SC_Wn32_LoadLibraryW");
    mkapi(ci,   9, "SC_Wn32_FreeLibrary");
    mkapi(ci,  10, "SC_Wn32_GetProcAddressW");
    mkapi(ci,  11, "SC_Wn32_ThreadAttachOrDetach");
    mkapi(ci,  12, "SC_Wn32_ThreadDetachAllDLLs");
    mkapi(ci,  13, "SC_Wn32_GetTickCount");
    mkapi(ci,  14, "SC_Wn32_OutputDebugStringW");
    mkapi(ci,  15, "SC_Wn32_TlsCall");
    mkapi(ci,  16, "SC_Wn32_GetSystemInfo");
    mkapi(ci,  17, "SC_Wn32_U_ropen");
    mkapi(ci,  18, "SC_Wn32_U_rread");
    mkapi(ci,  19, "SC_Wn32_U_rwrite");
    mkapi(ci,  20, "SC_Wn32_U_rlseek");
    mkapi(ci,  21, "SC_Wn32_U_rclose");
    mkapi(ci,  22, "SC_Wn32_RegisterDbgZones");
    mkapi(ci,  23, "SC_Wn32_NKvDbgPrintfW");
    mkapi(ci,  24, "SC_Wn32_ProfileSyscall");
    mkapi(ci,  25, "SC_Wn32_FindResource");
    mkapi(ci,  26, "SC_Wn32_LoadResource");
    mkapi(ci,  27, "SC_Wn32_SizeofResource");
    mkapi(ci,  28, "SC_Wn32_GetRealTime");
    mkapi(ci,  29, "SC_Wn32_OEMSetRealTime");
    mkapi(ci,  30, "SC_Wn32_ProcessDetachAllDLLs");
    mkapi(ci,  31, "SC_Wn32_ExtractResource");
    mkapi(ci,  32, "SC_Wn32_GetRomFileInfo");
    mkapi(ci,  33, "SC_Wn32_GetRomFileBytes");
    mkapi(ci,  34, "SC_Wn32_CacheRangeFlush");
    mkapi(ci,  35, "SC_Wn32_AddTrackedItem");
    mkapi(ci,  36, "SC_Wn32_DeleteTrackedItem");
    mkapi(ci,  37, "SC_Wn32_PrintTrackedItem");
    mkapi(ci,  38, "SC_Wn32_GetKPhys");
    mkapi(ci,  39, "SC_Wn32_GiveKPhys");
    mkapi(ci,  40, "SC_Wn32_SetExceptionHandler");
    mkapi(ci,  41, "SC_Wn32_RegisterTrackedItem");
    mkapi(ci,  42, "SC_Wn32_FilterTrackedItem");
    mkapi(ci,  43, "SC_Wn32_SetKernelAlarm");
    mkapi(ci,  44, "SC_Wn32_RefreshKernelAlarm");
    mkapi(ci,  45, "SC_Wn32_CeGetRandomSeed");
    mkapi(ci,  46, "SC_Wn32_CloseProcOE");
    mkapi(ci,  47, "SC_Wn32_SetGwesOOMEvent");
    mkapi(ci,  48, "SC_Wn32_FSStringCompress");
    mkapi(ci,  49, "SC_Wn32_FSStringDecompress");
    mkapi(ci,  50, "SC_Wn32_FSBinaryCompress");
    mkapi(ci,  51, "SC_Wn32_FSBinaryDecompress");
    mkapi(ci,  52, "SC_Wn32_CreateEvent");
    mkapi(ci,  53, "SC_Wn32_CreateProc");
    mkapi(ci,  54, "SC_Wn32_CreateThread");
    mkapi(ci,  55, "SC_Wn32_InputDebugCharW");
    mkapi(ci,  56, "SC_Wn32_UB_TakeCritSec");
    mkapi(ci,  57, "SC_Wn32_LeaveCritSec");
    mkapi(ci,  58, "SC_Wn32_UB_WaitForMultiple");
    mkapi(ci,  59, "SC_Wn32_MapPtrToProcess");
    mkapi(ci,  60, "SC_Wn32_MapPtrUnsecure");
    mkapi(ci,  61, "SC_Wn32_GetProcFromPtr");
    mkapi(ci,  62, "SC_Wn32_IsBadPtr");
    mkapi(ci,  63, "SC_Wn32_GetProcAddrBits");
    mkapi(ci,  64, "SC_Wn32_GetFSHeapInfo");
    mkapi(ci,  65, "SC_Wn32_OtherThreadsRunning");
    mkapi(ci,  66, "SC_Wn32_KillAllOtherThreads");
    mkapi(ci,  67, "SC_Wn32_GetOwnerProcess");
    mkapi(ci,  68, "SC_Wn32_GetCallerProcess");
    mkapi(ci,  69, "SC_Wn32_GetIdleTime");
    mkapi(ci,  70, "SC_Wn32_SetLowestScheduledPriority");
    mkapi(ci,  71, "SC_Wn32_IsPrimaryThread");
    mkapi(ci,  72, "SC_Wn32_SetProcPermissions");
    mkapi(ci,  73, "SC_Wn32_GetCurrentPermissions");
    mkapi(ci,  75, "SC_Wn32_SetDaylightTime");
    mkapi(ci,  76, "SC_Wn32_SetTimeZoneBias");
    mkapi(ci,  77, "SC_Wn32_SetCleanRebootFlag");
    mkapi(ci,  78, "SC_Wn32_CreateCrit");
    mkapi(ci,  79, "SC_Wn32_PowerOffSystem");
    mkapi(ci,  80, "SC_Wn32_CreateMutex");
    mkapi(ci,  81, "SC_Wn32_SetDbgZone");
    mkapi(ci,  82, "SC_Wn32_UB_Sleep");
    mkapi(ci,  83, "SC_Wn32_TurnOnProfiling");
    mkapi(ci,  84, "SC_Wn32_TurnOffProfiling");
    mkapi(ci,  85, "SC_Wn32_CeGetCurrentTrust");
    mkapi(ci,  86, "SC_Wn32_CeGetCallerTrust");
    mkapi(ci,  87, "SC_Wn32_NKTerminateThread");
    mkapi(ci,  88, "SC_Wn32_SetLastError");
    mkapi(ci,  89, "SC_Wn32_GetLastError");
    mkapi(ci,  90, "SC_Wn32_GetProcName");
    mkapi(ci,  91, "SC_Wn32_TerminateSelf");
    mkapi(ci,  92, "SC_Wn32_CloseAllHandles");
    mkapi(ci,  93, "SC_Wn32_SetHandleOwner");
    mkapi(ci,  94, "SC_Wn32_LoadDriver");
    mkapi(ci,  95, "SC_Wn32_CreateFileMapping");
    mkapi(ci,  96, "SC_Wn32_UnmapViewOfFile");
    mkapi(ci,  97, "SC_Wn32_FlushViewOfFile");
    mkapi(ci,  98, "SC_Wn32_CreateFileForMapping");
    mkapi(ci,  99, "SC_Wn32_KernelIoctl");
    mkapi(ci, 100, "SC_Wn32_GetCallStackSnapshot");
    mkapi(ci, 101, "SC_Wn32_PPSHRestart");
    mkapi(ci, 103, "SC_Wn32_UpdateNLSInfo");
    mkapi(ci, 104, "SC_Wn32_ConnectDebugger");
    mkapi(ci, 105, "SC_Wn32_InterruptInitialize");
    mkapi(ci, 106, "SC_Wn32_InterruptDone");
    mkapi(ci, 107, "SC_Wn32_InterruptDisable");
    mkapi(ci, 108, "SC_Wn32_SetKMode");
    mkapi(ci, 109, "SC_Wn32_SetPowerOffHandler");
    mkapi(ci, 110, "SC_Wn32_SetGwesPowerHandler");
    mkapi(ci, 111, "SC_Wn32_SetHardwareWatch");
    mkapi(ci, 112, "SC_Wn32_QueryAPISetID");
    mkapi(ci, 113, "SC_Wn32_CallForward");
    mkapi(ci, 114, "SC_Wn32_RaiseException");
    mkapi(ci, 115, "SC_Wn32_GetCallerIndex");
    mkapi(ci, 116, "SC_Wn32_WaitForDebugEvent");
    mkapi(ci, 117, "SC_Wn32_ContinueDebugEvent");
    mkapi(ci, 118, "SC_Wn32_DebugNotify");
    mkapi(ci, 119, "SC_Wn32_OpenProcess");
    mkapi(ci, 120, "SC_Wn32_THCreateSnapshot");
    mkapi(ci, 121, "SC_Wn32_THGrow");
    mkapi(ci, 122, "SC_Wn32_NotifyForceCleanboot");
    mkapi(ci, 123, "SC_Wn32_DumpKCallProfile");
    mkapi(ci, 124, "SC_Wn32_GetProcessVersion");
    mkapi(ci, 125, "SC_Wn32_GetModuleFileNameW");
    mkapi(ci, 126, "SC_Wn32_QueryPerformanceCounter");
    mkapi(ci, 127, "SC_Wn32_QueryPerformanceFrequency");
    mkapi(ci, 128, "SC_Wn32_KernExtractIcons");
    mkapi(ci, 129, "SC_Wn32_ForcePageout");
    mkapi(ci, 130, "SC_Wn32_GetThreadTimes");
    mkapi(ci, 131, "SC_Wn32_GetModuleHandleW");
    mkapi(ci, 132, "SC_Wn32_SetWDevicePowerHandler");
    mkapi(ci, 133, "SC_Wn32_SetStdioPathW");
    mkapi(ci, 134, "SC_Wn32_GetStdioPathW");
    mkapi(ci, 135, "SC_Wn32_ReadRegistryFromOEM");
    mkapi(ci, 136, "SC_Wn32_WriteRegistryToOEM");
    mkapi(ci, 137, "SC_Wn32_WriteDebugLED");
    mkapi(ci, 138, "SC_Wn32_LockPages");
    mkapi(ci, 139, "SC_Wn32_UnlockPages");
    mkapi(ci, 140, "SC_Wn32_VirtualSetAttributes");
    mkapi(ci, 141, "SC_Wn32_SetRAMMode");
    mkapi(ci, 142, "SC_Wn32_SetStoreQueueBase");
    mkapi(ci, 143, "SC_Wn32_FlushViewOfFileMaybe");
    mkapi(ci, 144, "SC_Wn32_GetProcAddressA");
    mkapi(ci, 145, "SC_Wn32_GetCommandLineW");
    mkapi(ci, 146, "SC_Wn32_DisableThreadLibraryCalls");
    mkapi(ci, 147, "SC_Wn32_CreateSemaphore");
    mkapi(ci, 148, "SC_Wn32_LoadLibraryExW");
    mkapi(ci, 149, "SC_Wn32_CallForward");
    mkapi(ci, 150, "SC_Wn32_CeMapArgumentArray");
    mkapi(ci, 151, "SC_Wn32_KillThreadIfNeeded");
    mkapi(ci, 152, "SC_Wn32_ProcGetIndex");
    mkapi(ci, 153, "SC_Wn32_RegisterGwesHandler");
    mkapi(ci, 154, "SC_Wn32_GetProfileBaseAddress");
    mkapi(ci, 155, "SC_Wn32_SetProfilePortAddress");
    mkapi(ci, 156, "SC_Wn32_CeLogData");
    mkapi(ci, 157, "SC_Wn32_CeLogSetZones");
    mkapi(ci, 158, "SC_Wn32_ModuleJit");
    mkapi(ci, 159, "SC_Wn32_CeSetExtendedPdata");
    mkapi(ci, 160, "SC_Wn32_VerQueryValueW");
    mkapi(ci, 161, "SC_Wn32_GetFileVersionInfoSizeW");
    mkapi(ci, 162, "SC_Wn32_GetFileVersionInfoW");
    mkapi(ci, 163, "SC_Wn32_CreateLocaleView");
    mkapi(ci, 164, "SC_Wn32_CeLogReSync");
    mkapi(ci, 165, "SC_Wn32_LoadIntChainHandler");
    mkapi(ci, 166, "SC_Wn32_FreeIntChainHandler");
    mkapi(ci, 167, "SC_Wn32_LoadKernelLibrary");
    mkapi(ci, 168, "SC_Wn32_AllocPhysMem");
    mkapi(ci, 169, "SC_Wn32_FreePhysMem");
    mkapi(ci, 170, "SC_Wn32_KernelLibIoControl");
    mkapi(ci, 171, "SC_Wn32_OpenEvent");
    mkapi(ci, 172, "SC_Wn32_UB_SleepTillTick");
    mkapi(ci, 173, "SC_Wn32_DuplicateHandle");
    mkapi(ci, 174, "SC_Wn32_CreateStaticMapping");
    mkapi(ci, 175, "SC_Wn32_MapCallerPtr");
    mkapi(ci, 176, "SC_Wn32_MapPtrWithSize");
    mkapi(ci, 177, "SC_Wn32_LoadStringW");
    mkapi(ci, 178, "SC_Wn32_QueryInstructionSet");
    mkapi(ci, 179, "SC_Wn32_CeLogGetZones");
    mkapi(ci, 180, "SC_Wn32_ProcGetIDFromIndex");
    mkapi(ci, 181, "SC_Wn32_IsProcessorFeaturePresent");
    mkapi(ci, 182, "SC_Wn32_DecompressBinaryBlock");
    mkapi(ci, 183, "SC_Wn32_PageOutModule");
    mkapi(ci, 184, "SC_Wn32_InterruptMask");
// wce500 apis:
mkapi(ci, 185, "SC_Wn32_GetProcModList");
mkapi(ci, 186, "SC_Wn32_FreeModFromCurrProc");
mkapi(ci, 187, "SC_Wn32_CeVirtualSharedAlloc");
mkapi(ci, 188, "SC_Wn32_DeleteStaticMapping");
mkapi(ci, 189, "SC_Wn32_CeCreateToken");
mkapi(ci, 190, "SC_Wn32_CeRevertToSelf");
mkapi(ci, 191, "SC_Wn32_CeImpersonateCurrProc");
mkapi(ci, 192, "SC_Wn32_CeDuplicateToken");
mkapi(ci, 193, "SC_Wn32_ConnectHdstub");
mkapi(ci, 194, "SC_Wn32_ConnectOsAxsT0");
mkapi(ci, 195, "SC_Wn32_IsNamedEventSignaled");
mkapi(ci, 196, "SC_Wn32_ConnectOsAxsT1");
mkapi(ci, 197, "SC_Wn32_DebugSetProcessKillOnExit");
mkapi(ci, 198, "SC_Wn32_CeGetProcessTrust");
mkapi(ci, 199, "SC_Wn32_CeOpenFileHandle");
}
// mk_THRD("THRD", 2, 1);
static mk_THRD(name, disp, type) {
    auto ci;
    ci= find_cinfo(name, disp, type);
    if (ci==BADADDR)
        return;

    initcinfo(ci, name);

    mkapi(ci,   0, "SC_THRD_ThreadCloseHandle");
    mkapi(ci,   2, "SC_THRD_UB_ThreadSuspend");
    mkapi(ci,   3, "SC_THRD_ThreadResume");
    mkapi(ci,   4, "SC_THRD_ThreadSetPrio");
    mkapi(ci,   5, "SC_THRD_ThreadGetPrio");
    mkapi(ci,   6, "SC_THRD_ThreadGetCode");
    mkapi(ci,   7, "SC_THRD_ThreadGetContext");
    mkapi(ci,   8, "SC_THRD_ThreadSetContext");
    mkapi(ci,   9, "SC_THRD_ThreadTerminate");
    mkapi(ci,  10, "SC_THRD_CeGetThreadPriority");
    mkapi(ci,  11, "SC_THRD_CeSetThreadPriority");
    mkapi(ci,  12, "SC_THRD_CeGetThreadQuantum");
    mkapi(ci,  13, "SC_THRD_CeSetThreadQuantum");

}
// mk_PROC("PROC", 2, 2);
static mk_PROC(name, disp, type) {
    auto ci;
    ci= find_cinfo(name, disp, type);
    if (ci==BADADDR)
        return;

    initcinfo(ci, name);

    mkapi(ci,    0, "SC_PROC_ProcCloseHandle");
    mkapi(ci,    2, "SC_PROC_ProcTerminate");
    mkapi(ci,    3, "SC_PROC_ProcGetCode");
    mkapi(ci,    5, "SC_PROC_ProcFlushICache");
    mkapi(ci,    6, "SC_PROC_ProcReadMemory");
    mkapi(ci,    7, "SC_PROC_ProcWriteMemory");
    mkapi(ci,    8, "SC_PROC_ProcDebug");
    mkapi(ci,    9, "SC_PROC_ProcGetModInfo");
    mkapi(ci,   10, "SC_PROC_ProcSetVer");
    mkapi(ci,   11, "SC_PROC_DebugActiveProcessStop");
    mkapi(ci,   12, "SC_PROC_CeGetModuleInfo");
    mkapi(ci,   13, "SC_PROC_CheckRemoteDebuggerPresent");

}

// mk_EVNT("EVNT", 2, 4);
static mk_EVNT(name, disp, type) {
    auto ci;
    ci= find_cinfo(name, disp, type);
    if (ci==BADADDR)
        return;

    initcinfo(ci, name);


    mkapi(ci,  0, "SC_EVNT_EventCloseHandle");
    mkapi(ci,  2, "SC_EVNT_EventModify");
    mkapi(ci,  3, "SC_EVNT_EventAddAccess");
    mkapi(ci,  4, "SC_EVNT_EventGetData");
    mkapi(ci,  5, "SC_EVNT_EventSetData");

}

// mk_MUTX("MUTX", 2, 5);
static mk_MUTX(name, disp, type) {
    auto ci;
    ci= find_cinfo(name, disp, type);
    if (ci==BADADDR)
        return;

    initcinfo(ci, name);

    mkapi(ci,  0, "SC_MUTX_MutexCloseHandle");
    mkapi(ci,  2, "SC_MUTX_ReleaseMutex");
}

// mk_SEMP("SEMP", 2, 13);
static mk_SEMP(name, disp, type) {
    auto ci;
    ci= find_cinfo(name, disp, type);
    if (ci==BADADDR)
        return;

    initcinfo(ci, name);

    mkapi(ci,  0, "SC_SEMP_SemaphoreCloseHandle");
    mkapi(ci,  2, "SC_SEMP_ReleaseSemaphore");
}

// mk_FMAP("FMAP", 2, 14);
static mk_FMAP(name, disp, type) {
    auto ci;
    ci= find_cinfo(name, disp, type);
    if (ci==BADADDR)
        return;

    initcinfo(ci, name);

    mkapi(ci,  0, "SC_FMAP_MapCloseHandle");
    mkapi(ci,  2, "SC_FMAP_MapViewOfFile");
}

static mk_syscalls() {
MakeName(0xf0010000, "SH_AFS_Unmount");
MakeName(0xf0010000, "SH_AFS_CloseHandle");
MakeName(0xf0010008, "SH_AFS_CreateDirectoryW");
MakeName(0xf001000c, "SH_AFS_RemoveDirectoryW");
MakeName(0xf0010010, "SH_AFS_GetFileAttributesW");
MakeName(0xf0010014, "SH_AFS_SetFileAttributesW");
MakeName(0xf0010018, "SH_AFS_CreateFileW");
MakeName(0xf001001c, "SH_AFS_DeleteFileW");
MakeName(0xf0010020, "SH_AFS_MoveFileW");
MakeName(0xf0010024, "SH_AFS_FindFirstFileW");
MakeName(0xf0010030, "SH_AFS_PrestoChangoFileName");
MakeName(0xf0010034, "SH_AFS_CloseAllFileHandles");
MakeName(0xf0010038, "SH_AFS_GetDiskFreeSpace");
MakeName(0xf001003c, "SH_AFS_NotifyMountedFS");
MakeName(0xf0010040, "SH_AFS_RegisterFileSystemFunction");
MakeName(0xf0010044, "SH_AFS_FindFirstChangeNotificationW");
MakeName(0xf000fffc, "SH_WIN32_NotSupported");
MakeName(0xf000fff8, "SH_WIN32_CreateAPISet");
MakeName(0xf000fff4, "SH_WIN32_VirtualAlloc");
MakeName(0xf000fff0, "SH_WIN32_VirtualFree");
MakeName(0xf000ffec, "SH_WIN32_VirtualProtect");
MakeName(0xf000ffe8, "SH_WIN32_VirtualQuery");
MakeName(0xf000ffe4, "SH_WIN32_VirtualCopy");
MakeName(0xf000ffe0, "SH_WIN32_LoadLibraryW");
MakeName(0xf000ffdc, "SH_WIN32_FreeLibrary");
MakeName(0xf000ffd8, "SH_WIN32_GetProcAddressW");
MakeName(0xf000ffd4, "SH_WIN32_ThreadAttachOrDetach");
MakeName(0xf000ffd0, "SH_WIN32_ThreadDetachAllDLLs");
MakeName(0xf000ffcc, "SH_WIN32_GetTickCount");
MakeName(0xf000ffc8, "SH_WIN32_OutputDebugStringW");
MakeName(0xf000ffc4, "SH_WIN32_TlsCall");
MakeName(0xf000ffc0, "SH_WIN32_GetSystemInfo");
MakeName(0xf000ffbc, "SH_WIN32_U_ropen");
MakeName(0xf000ffb8, "SH_WIN32_U_rread");
MakeName(0xf000ffb4, "SH_WIN32_U_rwrite");
MakeName(0xf000ffb0, "SH_WIN32_U_rlseek");
MakeName(0xf000ffac, "SH_WIN32_U_rclose");
MakeName(0xf000ffa8, "SH_WIN32_RegisterDbgZones");
MakeName(0xf000ffa4, "SH_WIN32_NKvDbgPrintfW");
MakeName(0xf000ffa0, "SH_WIN32_ProfileSyscall");
MakeName(0xf000ff9c, "SH_WIN32_FindResourceW");
MakeName(0xf000ff98, "SH_WIN32_LoadResource");
MakeName(0xf000ff94, "SH_WIN32_SizeofResource");
MakeName(0xf000ff90, "SH_WIN32_GetRealTime");
MakeName(0xf000ff8c, "SH_WIN32_SetRealTime");
MakeName(0xf000ff88, "SH_WIN32_ProcessDetachAllDLLs");
MakeName(0xf000ff84, "SH_WIN32_ExtractResource");
MakeName(0xf000ff80, "SH_WIN32_GetRomFileInfo");
MakeName(0xf000ff7c, "SH_WIN32_GetRomFileBytes");
MakeName(0xf000ff78, "SH_WIN32_CacheRangeFlush");
MakeName(0xf000ff74, "SH_WIN32_AddTrackedItem");
MakeName(0xf000ff70, "SH_WIN32_DeleteTrackedItem");
MakeName(0xf000ff6c, "SH_WIN32_PrintTrackedItem");
MakeName(0xf000ff68, "SH_WIN32_GetKPhys");
MakeName(0xf000ff64, "SH_WIN32_GiveKPhys");
MakeName(0xf000ff60, "SH_WIN32_SetExceptionHandler");
MakeName(0xf000ff5c, "SH_WIN32_RegisterTrackedItem");
MakeName(0xf000ff58, "SH_WIN32_FilterTrackedItem");
MakeName(0xf000ff54, "SH_WIN32_SetKernelAlarm");
MakeName(0xf000ff50, "SH_WIN32_RefreshKernelAlarm");
MakeName(0xf000ff4c, "SH_WIN32_CeGetRandomSeed");
MakeName(0xf000ff48, "SH_WIN32_CloseProcOE");
MakeName(0xf000ff44, "SH_WIN32_SetGwesOOMEvent");
MakeName(0xf000ff40, "SH_WIN32_StringCompress");
MakeName(0xf000ff3c, "SH_WIN32_StringDecompress");
MakeName(0xf000ff38, "SH_WIN32_BinaryCompress");
MakeName(0xf000ff34, "SH_WIN32_BinaryDecompress");
MakeName(0xf000ff30, "SH_WIN32_CreateEventW");
MakeName(0xf000ff2c, "SH_WIN32_CreateProcessW");
MakeName(0xf000ff28, "SH_WIN32_CreateThread");
MakeName(0xf000ff24, "SH_WIN32_InputDebugCharW");
MakeName(0xf000ff20, "SH_WIN32_TakeCritSec");
MakeName(0xf000ff1c, "SH_WIN32_LeaveCritSec");
MakeName(0xf000ff18, "SH_WIN32_WaitForMultipleObjects");
MakeName(0xf000ff14, "SH_WIN32_MapPtrToProcess");
MakeName(0xf000ff10, "SH_WIN32_MapPtrUnsecure");
MakeName(0xf000ff0c, "SH_WIN32_GetProcFromPtr");
MakeName(0xf000ff08, "SH_WIN32_IsBadPtr");
MakeName(0xf000ff04, "SH_WIN32_GetProcAddrBits");
MakeName(0xf000ff00, "SH_WIN32_GetFSHeapInfo");
MakeName(0xf000fefc, "SH_WIN32_OtherThreadsRunning");
MakeName(0xf000fef8, "SH_WIN32_KillAllOtherThreads");
MakeName(0xf000fef4, "SH_WIN32_GetOwnerProcess");
MakeName(0xf000fef0, "SH_WIN32_GetCallerProcess");
MakeName(0xf000feec, "SH_WIN32_GetIdleTime");
MakeName(0xf000fee8, "SH_WIN32_SetLowestScheduledPriority");
MakeName(0xf000fee4, "SH_WIN32_IsPrimaryThread");
MakeName(0xf000fee0, "SH_WIN32_SetProcPermissions");
MakeName(0xf000fedc, "SH_WIN32_GetCurrentPermissions");
MakeName(0xf000fed4, "SH_WIN32_SetDaylightTime");
MakeName(0xf000fed0, "SH_WIN32_SetTimeZoneBias");
MakeName(0xf000fecc, "SH_WIN32_SetCleanRebootFlag");
MakeName(0xf000fec8, "SH_WIN32_CreateCrit");
MakeName(0xf000fec4, "SH_WIN32_PowerOffSystem");
MakeName(0xf000fec0, "SH_WIN32_CreateMutexW");
MakeName(0xf000febc, "SH_WIN32_SetDbgZone");
MakeName(0xf000feb8, "SH_WIN32_Sleep");
MakeName(0xf000feb4, "SH_WIN32_TurnOnProfiling");
MakeName(0xf000feb0, "SH_WIN32_TurnOffProfiling");
MakeName(0xf000feac, "SH_WIN32_CeGetCurrentTrust");
MakeName(0xf000fea8, "SH_WIN32_CeGetCallerTrust");
MakeName(0xf000fea4, "SH_WIN32_NKTerminateThread");
MakeName(0xf000fea0, "SH_WIN32_SetLastError");
MakeName(0xf000fe9c, "SH_WIN32_GetLastError");
MakeName(0xf000fe98, "SH_WIN32_GetProcName");
MakeName(0xf000fe94, "SH_WIN32_ExitProcess");
MakeName(0xf000fe90, "SH_WIN32_CloseAllHandles");
MakeName(0xf000fe8c, "SH_WIN32_SetHandleOwner");
MakeName(0xf000fe88, "SH_WIN32_LoadDriver");
MakeName(0xf000fe84, "SH_WIN32_CreateFileMappingW");
MakeName(0xf000fe80, "SH_WIN32_UnmapViewOfFile");
MakeName(0xf000fe7c, "SH_WIN32_FlushViewOfFile");
MakeName(0xf000fe78, "SH_WIN32_CreateFileForMappingW");
MakeName(0xf000fe74, "SH_WIN32_KernelIoControl");
MakeName(0xf000fe70, "SH_WIN32_GetCallStackSnapshot");
MakeName(0xf000fe6c, "SH_WIN32_PPSHRestart");
MakeName(0xf000fe64, "SH_WIN32_UpdateNLSInfoEx");
MakeName(0xf000fe60, "SH_WIN32_ConnectDebugger");
MakeName(0xf000fe5c, "SH_WIN32_InterruptInitialize");
MakeName(0xf000fe58, "SH_WIN32_InterruptDone");
MakeName(0xf000fe54, "SH_WIN32_InterruptDisable");
MakeName(0xf000fe50, "SH_WIN32_SetKMode");
MakeName(0xf000fe4c, "SH_WIN32_SetPowerOffHandler");
MakeName(0xf000fe48, "SH_WIN32_SetGwesPowerHandler");
MakeName(0xf000fe44, "SH_WIN32_SetHardwareWatch");
MakeName(0xf000fe40, "SH_WIN32_QueryAPISetID");
MakeName(0xf000fe3c, "SH_WIN32_PerformCallBack");
MakeName(0xf000fe38, "SH_WIN32_RaiseException");
MakeName(0xf000fe34, "SH_WIN32_GetCallerProcessIndex");
MakeName(0xf000fe30, "SH_WIN32_WaitForDebugEvent");
MakeName(0xf000fe2c, "SH_WIN32_ContinueDebugEvent");
MakeName(0xf000fe28, "SH_WIN32_DebugNotify");
MakeName(0xf000fe24, "SH_WIN32_OpenProcess");
MakeName(0xf000fe20, "SH_WIN32_THCreateSnapshot");
MakeName(0xf000fe1c, "SH_WIN32_THGrow");
MakeName(0xf000fe18, "SH_WIN32_NotifyForceCleanboot");
MakeName(0xf000fe14, "SH_WIN32_DumpKCallProfile");
MakeName(0xf000fe10, "SH_WIN32_GetProcessVersion");
MakeName(0xf000fe0c, "SH_WIN32_GetModuleFileNameW");
MakeName(0xf000fe08, "SH_WIN32_QueryPerformanceCounter");
MakeName(0xf000fe04, "SH_WIN32_QueryPerformanceFrequency");
MakeName(0xf000fe00, "SH_WIN32_KernExtractIcons");
MakeName(0xf000fdfc, "SH_WIN32_ForcePageout");
MakeName(0xf000fdf8, "SH_WIN32_GetThreadTimes");
MakeName(0xf000fdf4, "SH_WIN32_GetModuleHandleW");
MakeName(0xf000fdf0, "SH_WIN32_SetWDevicePowerHandler");
MakeName(0xf000fdec, "SH_WIN32_SetStdioPathW");
MakeName(0xf000fde8, "SH_WIN32_GetStdioPathW");
MakeName(0xf000fde4, "SH_WIN32_ReadRegistryFromOEM");
MakeName(0xf000fde0, "SH_WIN32_WriteRegistryToOEM");
MakeName(0xf000fddc, "SH_WIN32_WriteDebugLED");
MakeName(0xf000fdd8, "SH_WIN32_LockPages");
MakeName(0xf000fdd4, "SH_WIN32_UnlockPages");
MakeName(0xf000fdd0, "SH_WIN32_VirtualSetAttributes");
MakeName(0xf000fdcc, "SH_WIN32_SetRAMMode");
MakeName(0xf000fdc8, "SH_WIN32_SetStoreQueueBase");
MakeName(0xf000fdc4, "SH_WIN32_FlushViewOfFileMaybe");
MakeName(0xf000fdc0, "SH_WIN32_GetProcAddressA");
MakeName(0xf000fdbc, "SH_WIN32_GetCommandLineW");
MakeName(0xf000fdb8, "SH_WIN32_DisableThreadLibraryCalls");
MakeName(0xf000fdb4, "SH_WIN32_CreateSemaphoreW");
MakeName(0xf000fdb0, "SH_WIN32_LoadLibraryExW");
MakeName(0xf000fdac, "SH_WIN32_PerformCallForward");
MakeName(0xf000fda8, "SH_WIN32_CeMapArgumentArray");
MakeName(0xf000fda4, "SH_WIN32_KillThreadIfNeeded");
MakeName(0xf000fda0, "SH_WIN32_GetProcessIndexFromID");
MakeName(0xf000fd9c, "SH_WIN32_RegisterGwesHandler");
MakeName(0xf000fd98, "SH_WIN32_GetProfileBaseAddress");
MakeName(0xf000fd94, "SH_WIN32_SetProfilePortAddress");
MakeName(0xf000fd90, "SH_WIN32_CeLogData");
MakeName(0xf000fd8c, "SH_WIN32_CeLogSetZones");
MakeName(0xf000fd88, "SH_WIN32_CeModuleJit");
MakeName(0xf000fd84, "SH_WIN32_CeSetExtendedPdata");
MakeName(0xf000fd80, "SH_WIN32_VerQueryValueW");
MakeName(0xf000fd7c, "SH_WIN32_GetFileVersionInfoSizeW");
MakeName(0xf000fd78, "SH_WIN32_GetFileVersionInfoW");
MakeName(0xf000fd74, "SH_WIN32_CreateLocaleView");
MakeName(0xf000fd70, "SH_WIN32_CeLogReSync");
MakeName(0xf000fd6c, "SH_WIN32_LoadIntChainHandler");
MakeName(0xf000fd68, "SH_WIN32_FreeIntChainHandler");
MakeName(0xf000fd64, "SH_WIN32_LoadKernelLibrary");
MakeName(0xf000fd60, "SH_WIN32_AllocPhysMem");
MakeName(0xf000fd5c, "SH_WIN32_FreePhysMem");
MakeName(0xf000fd58, "SH_WIN32_KernelLibIoControl");
MakeName(0xf000fd54, "SH_WIN32_OpenEventW");
MakeName(0xf000fd50, "SH_WIN32_SleepTillTick");
MakeName(0xf000fd4c, "SH_WIN32_DuplicateHandle");
MakeName(0xf000fd48, "SH_WIN32_CreateStaticMapping");
MakeName(0xf000fd44, "SH_WIN32_MapCallerPtr");
MakeName(0xf000fd40, "SH_WIN32_MapPtrToProcWithSize");
MakeName(0xf000fd3c, "SH_WIN32_LoadStringW");
MakeName(0xf000fd38, "SH_WIN32_QueryInstructionSet");
MakeName(0xf000fd34, "SH_WIN32_CeLogGetZones");
MakeName(0xf000fd30, "SH_WIN32_GetProcessIDFromIndex");
MakeName(0xf000fd2c, "SH_WIN32_IsProcessorFeaturePresent");
MakeName(0xf000fd28, "SH_WIN32_DecompressBinaryBlock");
MakeName(0xf000fd24, "SH_WIN32_PageOutModule");
MakeName(0xf000fd20, "SH_WIN32_InterruptMask");
MakeName(0xf000fd1c, "SH_WIN32_GetProcModList");
MakeName(0xf000fd18, "SH_WIN32_FreeModFromCurrProc");
MakeName(0xf000fd14, "SH_WIN32_CeVirtualSharedAlloc");
MakeName(0xf000fd10, "SH_WIN32_NKDeleteStaticMapping");
MakeName(0xf000fd0c, "SH_WIN32_CreateToken");
MakeName(0xf000fd08, "SH_WIN32_RevertToSelf");
MakeName(0xf000fd04, "SH_WIN32_CeImpersonateCurrProc");
MakeName(0xf000fd00, "SH_WIN32_CeDuplicateToken");
MakeName(0xf000fcfc, "SH_WIN32_ConnectHdstub");
MakeName(0xf000fcf8, "SH_WIN32_ConnectOsAxsT0");
MakeName(0xf000fcf4, "SH_WIN32_IsNamedEventSignaled");
MakeName(0xf000fcf0, "SH_WIN32_ConnectOsAxsT1");
MakeName(0xf000fcec, "SH_WIN32_DebugSetProcessKillOnExit");
MakeName(0xf000fce8, "SH_WIN32_CeGetProcessTrust");
MakeName(0xf000fce4, "SH_WIN32_CeOpenFileHandle");

MakeName(0xf000fbfc, "SH_CURTHREAD_ThreadCloseHandle");
MakeName(0xf000fbf8, "SH_CURTHREAD_SuspendThread");
MakeName(0xf000fbf4, "SH_CURTHREAD_ResumeThread");
MakeName(0xf000fbf0, "SH_CURTHREAD_SetThreadPriority");
MakeName(0xf000fbec, "SH_CURTHREAD_GetThreadPriority");
MakeName(0xf000fbe8, "SH_CURTHREAD_GetExitCodeThread");
MakeName(0xf000fbe4, "SH_CURTHREAD_GetThreadContext");
MakeName(0xf000fbe0, "SH_CURTHREAD_SetThreadContext");
MakeName(0xf000fbdc, "SH_CURTHREAD_TerminateThread");
MakeName(0xf000fbd8, "SH_CURTHREAD_CeGetThreadPriority");
MakeName(0xf000fbd4, "SH_CURTHREAD_CeSetThreadPriority");
MakeName(0xf000fbd0, "SH_CURTHREAD_CeGetThreadQuantum");
MakeName(0xf000fbcc, "SH_CURTHREAD_CeSetThreadQuantum");
MakeName(0xf000f800, "SH_CURPROC_ProcCloseHandle");
MakeName(0xf000f7f8, "SH_CURPROC_TerminateProcess");
MakeName(0xf000f7f4, "SH_CURPROC_GetExitCodeProcess");
MakeName(0xf000f7ec, "SH_CURPROC_FlushInstructionCache");
MakeName(0xf000f7e8, "SH_CURPROC_ReadProcessMemory");
MakeName(0xf000f7e4, "SH_CURPROC_WriteProcessMemory");
MakeName(0xf000f7e0, "SH_CURPROC_DebugActiveProcess");
MakeName(0xf000f7dc, "SH_CURPROC_GetModuleInformation");
MakeName(0xf000f7d8, "SH_CURPROC_CeSetProcessVersion");
MakeName(0xf000f7d4, "SH_CURPROC_DebugActiveProcessStop");
MakeName(0xf000f7d0, "SH_CURPROC_CeGetModuleInfo");
MakeName(0xf000f7cc, "SH_CURPROC_CheckRemoteDebuggerPresent");
MakeName(0xf000f000, "HT_EVENT_EventCloseHandle");
MakeName(0xf000eff8, "HT_EVENT_EventModify");
MakeName(0xf000eff4, "HT_EVENT_AddEventAccess");
MakeName(0xf000eff0, "HT_EVENT_EventGetData");
MakeName(0xf000efec, "HT_EVENT_EventSetData");
MakeName(0xf000ec00, "HT_MUTEX_MutexCloseHandle");
MakeName(0xf000ebf8, "HT_MUTEX_ReleaseMutex");
MakeName(0xf000e800, "HT_APISET_CloseAPISet");
MakeName(0xf000e7f8, "HT_APISET_RegisterAPISet");
MakeName(0xf000e7f4, "HT_APISET_CreateAPIHandle");
MakeName(0xf000e7f0, "HT_APISET_VerifyAPIHandle");
MakeName(0xf000e3fc, "HT_FILE_PSLGetStoreInfo");
MakeName(0xf000e3f8, "HT_FILE_PSLDismountStore");
MakeName(0xf000e3f8, "HT_FILE_ReadFile");
MakeName(0xf000e3f4, "HT_FILE_PSLFormatStore");
MakeName(0xf000e3f4, "HT_FILE_WriteFile");
MakeName(0xf000e3f0, "HT_FILE_GetFileSize");
MakeName(0xf000e3f0, "HT_FILE_PSLCreatePart");
MakeName(0xf000e3ec, "HT_FILE_PSLDeletePartition");
MakeName(0xf000e3ec, "HT_FILE_SetFilePointer");
MakeName(0xf000e3e8, "HT_FILE_GetFileInformationByHandle");
MakeName(0xf000e3e8, "HT_FILE_PSLOpenPartition");
MakeName(0xf000e3e4, "HT_FILE_FlushFileBuffers");
MakeName(0xf000e3e4, "HT_FILE_PSLMountPartition");
MakeName(0xf000e3e0, "HT_FILE_GetFileTime");
MakeName(0xf000e3e0, "HT_FILE_PSLDismountPartition");
MakeName(0xf000e3dc, "HT_FILE_PSLRenamePartition");
MakeName(0xf000e3dc, "HT_FILE_SetFileTime");
MakeName(0xf000e3d8, "HT_FILE_PSLSetPartitionAttributes");
MakeName(0xf000e3d8, "HT_FILE_SetEndOfFile");
MakeName(0xf000e3d4, "HT_FILE_DeviceIoControl");
MakeName(0xf000e3d0, "HT_FILE_PSLGetPartitionInfo");
MakeName(0xf000e3d0, "HT_FILE_ReadFileWithSeek");
MakeName(0xf000e3cc, "HT_FILE_PSLFormatPart");
MakeName(0xf000e3cc, "HT_FILE_WriteFileWithSeek");
MakeName(0xf000e3c8, "HT_FILE_PSLFindFirstPartition");
MakeName(0xf000e000, "HT_FIND_FindClose");
//MakeName(0xf000e000, "HT_FIND_PSLFindClosePartition");
//MakeName(0xf000e000, "HT_FIND_PSLFindCloseStore");
MakeName(0xf000dff8, "HT_FIND_FindNextFileW");
//MakeName(0xf000dff8, "HT_FIND_PSLFindNextPartition");
//MakeName(0xf000dff8, "HT_FIND_PSLFindNextStore");
MakeName(0xf000dbf8, "HT_DBFILE_CeSeekDatabaseEx");
MakeName(0xf000dbf4, "HT_DBFILE_CeDeleteRecord");
MakeName(0xf000dbf0, "HT_DBFILE_CeReadRecordPropsEx");
MakeName(0xf000dbec, "HT_DBFILE_CeWriteRecordProps");
MakeName(0xf000dbe8, "HT_DBFILE_CeGetDBInformationByHandle");
MakeName(0xf000d7f8, "HT_DBFIND_CeFindNextDatabaseEx");
MakeName(0xf000d400, "HT_SOCKET_AFDCloseSocket");
MakeName(0xf000d3f8, "HT_SOCKET_AFDAccept");
MakeName(0xf000d3f4, "HT_SOCKET_AFDBind");
MakeName(0xf000d3f0, "HT_SOCKET_AFDConnect");
MakeName(0xf000d3ec, "HT_SOCKET_AFDIoctl");
MakeName(0xf000d3e8, "HT_SOCKET_AFDListen");
MakeName(0xf000d3e4, "HT_SOCKET_AFDRecv");
MakeName(0xf000d3e0, "HT_SOCKET_AFDSend");
MakeName(0xf000d3dc, "HT_SOCKET_AFDShutdown");
MakeName(0xf000d3d8, "HT_SOCKET_AFDGetsockname");
MakeName(0xf000d3d4, "HT_SOCKET_AFDGetpeername");
MakeName(0xf000d3d0, "HT_SOCKET_AFDGetSockOpt");
MakeName(0xf000d3cc, "HT_SOCKET_AFDSetSockOpt");
MakeName(0xf000d3c8, "HT_SOCKET_AFDWakeup");
MakeName(0xf000d3c4, "HT_SOCKET_AFDGetOverlappedResult");
MakeName(0xf000d3c0, "HT_SOCKET_AFDEventSelect");
MakeName(0xf000d3bc, "HT_SOCKET_AFDEnumNetworkEvents");
MakeName(0xf000cc00, "HT_SEMAPHORE_SemaphoreCloseHandle");
MakeName(0xf000cbf8, "HT_SEMAPHORE_ReleaseSemaphore");
MakeName(0xf000c800, "HT_FSMAP_MapCloseHandle");
MakeName(0xf000c7f8, "HT_FSMAP_MapViewOfFile");
MakeName(0xf000c400, "HT_WNETENUM_WNetCloseEnum");
MakeName(0xf000c3f8, "HT_WNETENUM_WNetEnumResourceW");
MakeName(0xf000bff8, "SH_GDI_AddFontResourceW");
MakeName(0xf000bff4, "SH_GDI_BitBlt");
MakeName(0xf000bff0, "SH_GDI_CombineRgn");
MakeName(0xf000bfec, "SH_GDI_CreateCompatibleDC");
MakeName(0xf000bfe8, "SH_GDI_CreateDIBPatternBrushPt");
MakeName(0xF000BFE4, "SH_GDI_CreateDIBSection");
MakeName(0xf000bfe0, "SH_GDI_CreateFontIndirectW");
MakeName(0xf000bfdc, "SH_GDI_CreateRectRgnIndirect");
MakeName(0xf000bfd8, "SH_GDI_CreatePenIndirect");
MakeName(0xf000bfd4, "SH_GDI_CreateSolidBrush");
MakeName(0xf000bfd0, "SH_GDI_DeleteDC");
MakeName(0xf000bfcc, "SH_GDI_DeleteObject");
MakeName(0xf000bfc8, "SH_GDI_DrawEdge");
MakeName(0xf000bfc4, "SH_GDI_DrawFocusRect");
MakeName(0xf000bfc0, "SH_GDI_DrawTextW");
MakeName(0xf000bfbc, "SH_GDI_Ellipse");
MakeName(0xf000bfb8, "SH_GDI_EnumFontFamiliesW");
MakeName(0xF000BFB4, "SH_GDI_EnumFontsW");
MakeName(0xf000bfb0, "SH_GDI_ExcludeClipRect");
MakeName(0xf000bfac, "SH_GDI_ExtTextOutW");
MakeName(0xf000bfa8, "SH_GDI_FillRect");
MakeName(0xf000bfa0, "SH_GDI_GetBkColor");
MakeName(0xf000bf9c, "SH_GDI_GetBkMode");
MakeName(0xf000bf98, "SH_GDI_GetClipRgn");
MakeName(0xf000bf94, "SH_GDI_GetCurrentObject");
MakeName(0xf000bf90, "SH_GDI_GetDeviceCaps");
MakeName(0xf000bf8c, "SH_GDI_GetNearestColor");
MakeName(0xf000bf88, "SH_GDI_GetObjectW");
MakeName(0xf000bf84, "SH_GDI_GetObjectType");
MakeName(0xf000bf80, "SH_GDI_GetPixel");
MakeName(0xf000bf7c, "SH_GDI_GetRegionData");
MakeName(0xf000bf78, "SH_GDI_GetRgnBox");
MakeName(0xf000bf74, "SH_GDI_GetStockObject");
MakeName(0xf000bf70, "SH_GDI_PatBlt");
MakeName(0xf000bf6c, "SH_GDI_GetTextColor");
MakeName(0xf000bf68, "SH_GDI_GetTextExtentExPointW");
MakeName(0xf000bf64, "SH_GDI_GetTextFaceW");
MakeName(0xf000bf60, "SH_GDI_GetTextMetricsW");
MakeName(0xf000bf5c, "SH_GDI_MaskBlt");
MakeName(0xf000bf58, "SH_GDI_OffsetRgn");
MakeName(0xf000bf54, "SH_GDI_Polygon");
MakeName(0xf000bf50, "SH_GDI_Polyline");
MakeName(0xf000bf4c, "SH_GDI_PtInRegion");
MakeName(0xf000bf48, "SH_GDI_Rectangle");
MakeName(0xf000bf44, "SH_GDI_RectInRegion");
MakeName(0xf000bf40, "SH_GDI_RemoveFontResourceW");
MakeName(0xf000bf3c, "SH_GDI_RestoreDC");
MakeName(0xf000bf38, "SH_GDI_RoundRect");
MakeName(0xf000bf34, "SH_GDI_SaveDC");
MakeName(0xf000bf30, "SH_GDI_SelectClipRgn");
MakeName(0xf000bf2c, "SH_GDI_SelectObject");
MakeName(0xf000bf28, "SH_GDI_SetBkColor");
MakeName(0xf000bf24, "SH_GDI_SetBkMode");
MakeName(0xf000bf20, "SH_GDI_SetBrushOrgEx");
MakeName(0xf000bf1c, "SH_GDI_SetPixel");
MakeName(0xf000bf18, "SH_GDI_SetTextColor");
MakeName(0xf000bf14, "SH_GDI_StretchBlt");
MakeName(0xf000bf10, "SH_GDI_CreateBitmap");
MakeName(0xf000bf0c, "SH_GDI_CreateCompatibleBitmap");
MakeName(0xf000bf08, "SH_GDI_GetSysColorBrush");
MakeName(0xf000bf04, "SH_GDI_IntersectClipRect");
MakeName(0xf000bf00, "SH_GDI_GetClipBox");
MakeName(0xf000befc, "SH_GDI_CeRemoveFontResource");
MakeName(0xf000bef8, "SH_GDI_EnableEUDC");
MakeName(0xf000bef4, "SH_GDI_CloseEnhMetaFile");
MakeName(0xf000bef0, "SH_GDI_CreateEnhMetaFileW");
MakeName(0xf000beec, "SH_GDI_DeleteEnhMetaFile");
MakeName(0xf000bee8, "SH_GDI_PlayEnhMetaFile");
MakeName(0xf000bee4, "SH_GDI_CreatePalette");
MakeName(0xf000bee0, "SH_GDI_SelectPalette");
MakeName(0xf000bedc, "SH_GDI_RealizePalette");
MakeName(0xf000bed8, "SH_GDI_GetPaletteEntries");
MakeName(0xf000bed4, "SH_GDI_SetPaletteEntries");
MakeName(0xf000bed0, "SH_GDI_GetSystemPaletteEntries");
MakeName(0xf000becc, "SH_GDI_GetNearestPaletteIndex");
MakeName(0xf000bec8, "SH_GDI_CreatePen");
MakeName(0xf000bec4, "SH_GDI_StartDocW");
MakeName(0xf000bec0, "SH_GDI_EndDoc");
MakeName(0xf000bebc, "SH_GDI_StartPage");
MakeName(0xf000beb8, "SH_GDI_EndPage");
MakeName(0xf000beb4, "SH_GDI_AbortDoc");
MakeName(0xf000beb0, "SH_GDI_SetAbortProc");
MakeName(0xf000beac, "SH_GDI_CreateDCW");
MakeName(0xf000bea8, "SH_GDI_CreateRectRgn");
MakeName(0xf000bea4, "SH_GDI_FillRgn");
MakeName(0xf000bea0, "SH_GDI_SetROP2");
MakeName(0xf000be9c, "SH_GDI_SetRectRgn");
MakeName(0xf000be98, "SH_GDI_RectVisible");
MakeName(0xf000be94, "SH_GDI_CreatePatternBrush");
MakeName(0xf000be90, "SH_GDI_CreateBitmapFromPointer");
MakeName(0xf000be8c, "SH_GDI_SetViewportOrgEx");
MakeName(0xf000be88, "SH_GDI_TransparentImage");
MakeName(0xf000be84, "SH_GDI_SetObjectOwner");
MakeName(0xf000be80, "SH_GDI_TranslateCharsetInfo");
MakeName(0xf000be7c, "SH_GDI_ExtEscape");
MakeName(0xf000be78, "SH_GDI_SetWindowsHookExW_Trap");
MakeName(0xf000be74, "SH_GDI_UnhookWindowsHookEx_Trap");
MakeName(0xf000be70, "SH_GDI_GetForegroundInfo");
MakeName(0xf000be6c, "SH_GDI_CeGetUserNotificationPreferences");
MakeName(0xf000be68, "SH_GDI_CeSetUserNotificationEx");
MakeName(0xf000be64, "SH_GDI_CeClearUserNotification");
MakeName(0xf000be60, "SH_GDI_CeRunAppAtEvent");
MakeName(0xf000be5c, "SH_GDI_CeHandleAppNotifications");
MakeName(0xf000be58, "SH_GDI_CeGetUserNotificationHandles");
MakeName(0xf000be54, "SH_GDI_CeGetUserNotification");
MakeName(0xf000be50, "SH_GDI_CeEventHasOccurred");
MakeName(0xf000be4c, "SH_GDI_SetWindowRgn_Trap");
MakeName(0xf000be48, "SH_GDI_GetPrivateCallbacks_Trap");
MakeName(0xf000be44, "SH_GDI_GetWindowRgn_Trap");
MakeName(0xf000be40, "SH_GDI_CeRunAppAtTime");
MakeName(0xf000be3c, "SH_GDI_GetDesktopWindow_Trap");
MakeName(0xf000be38, "SH_GDI_InSendMessage_Trap");
MakeName(0xf000be34, "SH_GDI_GetQueueStatus_Trap");
MakeName(0xf000be30, "SH_GDI_AllKeys_Trap");
MakeName(0xf000be2c, "SH_GDI_LoadAnimatedCursor_Trap");
MakeName(0xf000be28, "SH_GDI_SendMessageTimeout");
MakeName(0xf000be24, "SH_GDI_SetProp_Trap");
MakeName(0xf000be20, "SH_GDI_GetProp_Trap");
MakeName(0xf000be1c, "SH_GDI_RemoveProp_Trap");
MakeName(0xf000be18, "SH_GDI_EnumPropsEx_Trap");
MakeName(0xf000be14, "SH_GDI_GetMessageQueueReadyTimeStamp");
MakeName(0xf000be10, "SH_GDI_RegisterTaskBarEx");
MakeName(0xf000be0c, "SH_GDI_RegisterDesktop");
MakeName(0xf000be08, "SH_GDI_GlobalAddAtomW");
MakeName(0xf000be04, "SH_GDI_GlobalDeleteAtom");
MakeName(0xf000be00, "SH_GDI_GlobalFindAtomW");
MakeName(0xf000bdfc, "SH_GDI_MonitorFromPoint_Trap");
MakeName(0xf000bdf8, "SH_GDI_MonitorFromRect_Trap");
MakeName(0xf000bdf4, "SH_GDI_MonitorFromWindow_Trap");
MakeName(0xf000bdf0, "SH_GDI_GetMonitorInfo_Trap");
MakeName(0xf000bdec, "SH_GDI_EnumDisplayMonitors_Trap");
MakeName(0xf000bde8, "SH_GDI_AccessibilitySoundSentryEvent_Trap");
MakeName(0xf000bde4, "SH_GDI_ChangeDisplaySettingsEx_Trap");
MakeName(0xf000bde0, "SH_GDI_InvalidateRgn_Trap");
MakeName(0xf000bddc, "SH_GDI_ValidateRgn_Trap");
MakeName(0xf000bdd8, "SH_GDI_ExtCreateRegion");
MakeName(0xf000bdd4, "SH_GDI_MoveToEx");
MakeName(0xf000bdd0, "SH_GDI_LineTo");
MakeName(0xf000bdcc, "SH_GDI_GetCurrentPositionEx");
MakeName(0xf000bdc8, "SH_GDI_SetTextAlign");
MakeName(0xf000bdc4, "SH_GDI_GetTextAlign");
MakeName(0xf000bdc0, "SH_GDI_GetCharWidth32");
MakeName(0xf000bdbc, "SH_GDI_GetDIBColorTable");
MakeName(0xf000bdb8, "SH_GDI_SetDIBColorTable");
MakeName(0xf000bdb4, "SH_GDI_StretchDIBits");
MakeName(0xf000bdb0, "SH_GDI_RedrawWindow_Trap");
MakeName(0xf000bdac, "SH_GDI_SetBitmapBits");
MakeName(0xf000bda8, "SH_GDI_SetDIBitsToDevice");
MakeName(0xf000bda4, "SH_GDI_GradientFill");
MakeName(0xf000bda0, "SH_GDI_InvertRect");
MakeName(0xf000bd9c, "SH_GDI_EnumDisplaySettings_Trap");
MakeName(0xf000bd98, "SH_GDI_EnumDisplayDevices_Trap");
MakeName(0xf000bd94, "SH_GDI_GetCharABCWidths");
MakeName(0xf000bd90, "SH_GDI_ShowStartupWindow_Trap");
MakeName(0xF000BD8C, "SH_GDI_GetGweApiSetTables");
MakeName(0xF000BD88, "SH_GDI_GetStretchBltMode");
MakeName(0xF000BD84, "SH_GDI_SetStretchBltMode");
MakeName(0xF000BD80, "SH_GDI_AlphaBlend");
MakeName(0xF000BD7C, "SH_GDI_GetIconInfo");
MakeName(0xF000BD78, "SH_GDI_EnumFontFamiliesExW");
MakeName(0xF000BD74, "SH_GDI_GetFontData");
MakeName(0xF000BD70, "SH_GDI_GetCharABCWidthsI");
MakeName(0xF000BD6C, "SH_GDI_GetOutlineTextMetricsW");
MakeName(0xF000BD68, "SH_GDI_SetLayout");
MakeName(0xF000BD64, "SH_GDI_GetLayout");
MakeName(0xF000BD60, "SH_GDI_SetTextCharacterExtra");
MakeName(0xF000BD5C, "SH_GDI_GetTextCharacterExtra");
MakeName(0xF000BD58, "SH_GDI_ImmGetKeyboardLayout");
MakeName(0xF000BD54, "SH_GDI_GetViewportOrgEx");
MakeName(0xF000BD50, "SH_GDI_GetViewportExtEx");
MakeName(0xF000BD4C, "SH_GDI_OffsetViewportOrgEx");
MakeName(0xF000BD48, "SH_GDI_GetROP2");
MakeName(0xF000BD44, "SH_GDI_SetWindowOrgEx");
MakeName(0xF000BD40, "SH_GDI_GetWindowOrgEx");
MakeName(0xF000BD3C, "SH_GDI_GetWindowExtEx");
MakeName(0xF000BD34, "SH_GDI_Gesture");
MakeName(0xF000BD30, "SH_GDI_GetWindowAutoGesture");
MakeName(0xF000BD2C, "SH_GDI_SetWindowAutoGesture");
MakeName(0xF000BD28, "SH_GDI_RegisterGesture");
MakeName(0xF000BD24, "SH_GDI_RegisterDefaultGestureHandler");
MakeName(0xF000BD20, "SH_GDI_SetLayeredWindowAttributes");
MakeName(0xF000BD1C, "SH_GDI_GetLayeredWindowAttributes");
MakeName(0xF000BD18, "SH_GDI_UpdateLayeredWindow");
MakeName(0xF000BD14, "SH_GDI_UpdateLayeredWindowIndirect");
MakeName(0xF000BD10, "SH_GDI_DrawThemePrimitive");
MakeName(0xF000BD0C, "SH_GDI_ThemePrimitiveExists");
MakeName(0xF000BD08, "SH_GDI_UpdateThemePrimitives");
MakeName(0xF000BD04, "SH_GDI_COREDLL_2872");


MakeName(0xf000bbf8, "SH_WMGR_RegisterClassWApiSetEntry_Trap");
MakeName(0xf000bbf4, "SH_WMGR_UnregisterClassW_Trap");
MakeName(0xf000bbf0, "SH_WMGR_CreateWindowExW_Trap");
MakeName(0xf000bbec, "SH_WMGR_PostMessageW");
MakeName(0xf000bbe8, "SH_WMGR_PostQuitMessage_Trap");
MakeName(0xf000bbe4, "SH_WMGR_SendMessageW");
MakeName(0xf000bbe0, "SH_WMGR_GetMessageW");
MakeName(0xf000bbdc, "SH_WMGR_TranslateMessage_Trap");
MakeName(0xf000bbd8, "SH_WMGR_DispatchMessageW");
MakeName(0xf000bbd4, "SH_WMGR_GetCapture_Trap");
MakeName(0xf000bbd0, "SH_WMGR_SetCapture_Trap");
MakeName(0xf000bbcc, "SH_WMGR_ReleaseCapture_Trap");
MakeName(0xf000bbc8, "SH_WMGR_SetWindowPos");
MakeName(0xf000bbc4, "SH_WMGR_GetWindowRect");
MakeName(0xf000bbc0, "SH_WMGR_GetClientRect");
MakeName(0xf000bbbc, "SH_WMGR_InvalidateRect");
MakeName(0xf000bbb8, "SH_WMGR_GetWindow");
MakeName(0xf000bbb4, "SH_WMGR_GetSystemMetrics");
MakeName(0xf000bbb0, "SH_WMGR_ImageList_GetDragImage");
MakeName(0xf000bbac, "SH_WMGR_ImageList_GetIconSize");
MakeName(0xf000bba8, "SH_WMGR_ImageList_SetIconSize");
MakeName(0xf000bba4, "SH_WMGR_ImageList_GetImageInfo");
MakeName(0xf000bba0, "SH_WMGR_ImageList_Merge");
MakeName(0xf000bb9c, "SH_WMGR_ShowCursor_Trap");
MakeName(0xf000bb98, "SH_WMGR_SetCursorPos_Trap");
MakeName(0xf000bb94, "SH_WMGR_ImageList_CopyDitherImage");
MakeName(0xf000bb90, "SH_WMGR_ImageList_DrawIndirect");
MakeName(0xf000bb8c, "SH_WMGR_ImageList_DragShowNolock");
MakeName(0xf000bb88, "SH_WMGR_WindowFromPoint_Trap");
MakeName(0xf000bb84, "SH_WMGR_ChildWindowFromPoint_Trap");
MakeName(0xf000bb80, "SH_WMGR_ClientToScreen");
MakeName(0xf000bb7c, "SH_WMGR_ScreenToClient_Trap");
MakeName(0xf000bb78, "SH_WMGR_SetWindowTextW_Trap");
MakeName(0xf000bb74, "SH_WMGR_GetWindowTextW_Trap");
MakeName(0xf000bb70, "SH_WMGR_SetWindowLongW");
MakeName(0xf000bb6c, "SH_WMGR_GetWindowLongW");
MakeName(0xf000bb68, "SH_WMGR_BeginPaint");
MakeName(0xf000bb64, "SH_WMGR_EndPaint");
MakeName(0xf000bb60, "SH_WMGR_GetDC");
MakeName(0xf000bb5c, "SH_WMGR_ReleaseDC");
MakeName(0xf000bb58, "SH_WMGR_DefWindowProcW");
MakeName(0xf000bb54, "SH_WMGR_GetClassLongW_Trap");
MakeName(0xf000bb50, "SH_WMGR_SetClassLongW_Trap");
MakeName(0xf000bb4c, "SH_WMGR_DestroyWindow_Trap");
MakeName(0xf000bb48, "SH_WMGR_ShowWindow_Trap");
MakeName(0xf000bb44, "SH_WMGR_UpdateWindow_Trap");
MakeName(0xf000bb40, "SH_WMGR_SetParent_Trap");
MakeName(0xf000bb3c, "SH_WMGR_GetParent");
MakeName(0xf000bb38, "SH_WMGR_MessageBoxW_Trap");
MakeName(0xf000bb34, "SH_WMGR_SetFocus_Trap");
MakeName(0xf000bb30, "SH_WMGR_GetFocus");
MakeName(0xf000bb2c, "SH_WMGR_GetActiveWindow_Trap");
MakeName(0xf000bb28, "SH_WMGR_GetWindowDC_Trap");
MakeName(0xf000bb24, "SH_WMGR_GetSysColor");
MakeName(0xf000bb20, "SH_WMGR_AdjustWindowRectEx_Trap");
MakeName(0xf000bb1c, "SH_WMGR_IsWindow");
MakeName(0xf000bb18, "SH_WMGR_CreatePopupMenu_Trap");
MakeName(0xf000bb14, "SH_WMGR_InsertMenuW_Trap");
MakeName(0xf000bb10, "SH_WMGR_AppendMenuW_Trap");
MakeName(0xf000bb0c, "SH_WMGR_RemoveMenu_Trap");
MakeName(0xf000bb08, "SH_WMGR_DestroyMenu_Trap");
MakeName(0xf000bb04, "SH_WMGR_TrackPopupMenuEx_Trap");
MakeName(0xf000bb00, "SH_WMGR_LoadMenuW_Trap");
MakeName(0xf000bafc, "SH_WMGR_EnableMenuItem_Trap");
MakeName(0xf000baf8, "SH_WMGR_MoveWindow_Trap");
MakeName(0xf000baf4, "SH_WMGR_GetUpdateRgn_Trap");
MakeName(0xf000baf0, "SH_WMGR_GetUpdateRect_Trap");
MakeName(0xf000baec, "SH_WMGR_BringWindowToTop_Trap");
MakeName(0xf000bae8, "SH_WMGR_GetWindowTextLengthW_Trap");
MakeName(0xf000bae4, "SH_WMGR_IsChild_Trap");
MakeName(0xf000bae0, "SH_WMGR_IsWindowVisible");
MakeName(0xf000badc, "SH_WMGR_ValidateRect_Trap");
MakeName(0xf000bad8, "SH_WMGR_LoadBitmapW_Trap");
MakeName(0xf000bad4, "SH_WMGR_CheckMenuItem_Trap");
MakeName(0xf000bad0, "SH_WMGR_CheckMenuRadioItem_Trap");
MakeName(0xf000bacc, "SH_WMGR_DeleteMenu");
MakeName(0xf000bac8, "SH_WMGR_LoadIconW_Trap");
MakeName(0xf000bac4, "SH_WMGR_DrawIconEx_Trap");
MakeName(0xf000bac0, "SH_WMGR_DestroyIcon_Trap");
MakeName(0xf000babc, "SH_WMGR_GetAsyncKeyState");
MakeName(0xf000bab8, "SH_WMGR_multitouch_event");
MakeName(0xf000bab4, "SH_WMGR_DialogBoxIndirectParamW");
MakeName(0xf000bab0, "SH_WMGR_EndDialog");
MakeName(0xf000baac, "SH_WMGR_GetDlgItem");
MakeName(0xf000baa8, "SH_WMGR_GetDlgCtrlID");
MakeName(0xf000baa4, "SH_WMGR_GetKeyState");
MakeName(0xf000baa0, "SH_WMGR_KeybdGetDeviceInfo");
MakeName(0xf000ba9c, "SH_WMGR_KeybdInitStates");
MakeName(0xf000ba98, "SH_WMGR_PostKeybdMessage");
MakeName(0xf000ba94, "SH_WMGR_KeybdVKeyToUnicode");
MakeName(0xf000ba90, "SH_WMGR_keybd_event");
MakeName(0xf000ba8c, "SH_WMGR_mouse_event");
MakeName(0xf000ba88, "SH_WMGR_SetScrollInfo");
MakeName(0xf000ba84, "SH_WMGR_SetScrollPos");
MakeName(0xf000ba80, "SH_WMGR_SetScrollRange");
MakeName(0xf000ba7c, "SH_WMGR_GetScrollInfo");
MakeName(0xf000ba78, "SH_WMGR_PeekMessageW");
MakeName(0xf000ba74, "SH_WMGR_MapVirtualKeyW");
MakeName(0xf000ba70, "SH_WMGR_GetMessageWNoWait");
MakeName(0xf000ba6c, "SH_WMGR_GetClassNameW");
MakeName(0xf000ba68, "SH_WMGR_MapWindowPoints");
MakeName(0xf000ba64, "SH_WMGR_LoadImageW");
MakeName(0xf000ba60, "SH_WMGR_GetForegroundWindow");
MakeName(0xf000ba5c, "SH_WMGR_SetForegroundWindow");
MakeName(0xf000ba58, "SH_WMGR_RegisterTaskBar");
MakeName(0xf000ba54, "SH_WMGR_SetActiveWindow");
MakeName(0xf000ba50, "SH_WMGR_CallWindowProcW_Trap");
MakeName(0xf000ba4c, "SH_WMGR_GetClassInfoW");
MakeName(0xf000ba48, "SH_WMGR_GetNextDlgTabItem");
MakeName(0xf000ba44, "SH_WMGR_CreateDialogIndirectParamW");
MakeName(0xf000ba40, "SH_WMGR_IsDialogMessageW");
MakeName(0xf000ba3c, "SH_WMGR_SetDlgItemInt");
MakeName(0xf000ba38, "SH_WMGR_GetDlgItemInt");
MakeName(0xf000ba34, "SH_WMGR_FindWindowW");
MakeName(0xf000ba30, "SH_WMGR_CreateCaret");
MakeName(0xf000ba2c, "SH_WMGR_DestroyCaret");
MakeName(0xf000ba28, "SH_WMGR_HideCaret");
MakeName(0xf000ba24, "SH_WMGR_ShowCaret");
MakeName(0xf000ba20, "SH_WMGR_SetCaretPos");
MakeName(0xf000ba1c, "SH_WMGR_GetCaretPos");
MakeName(0xf000ba18, "SH_WMGR_GetCursorPos_Trap");
MakeName(0xf000ba14, "SH_WMGR_ClipCursor");
MakeName(0xf000ba10, "SH_WMGR_GetClipCursor");
MakeName(0xf000ba0c, "SH_WMGR_GetCursor_Trap");
MakeName(0xf000ba08, "SH_WMGR_ExtractIconExW");
MakeName(0xf000ba04, "SH_WMGR_SetTimer_Trap");
MakeName(0xf000ba00, "SH_WMGR_KillTimer_Trap");
MakeName(0xf000b9fc, "SH_WMGR_GetNextDlgGroupItem");
MakeName(0xf000b9f8, "SH_WMGR_CheckRadioButton");
MakeName(0xf000b9f4, "SH_WMGR_EnableWindow");
MakeName(0xf000b9f0, "SH_WMGR_IsWindowEnabled");
MakeName(0xf000b9ec, "SH_WMGR_CreateMenu");
MakeName(0xf000b9e8, "SH_WMGR_GetSubMenu");
MakeName(0xf000b9e4, "SH_WMGR_DefDlgProcW");
MakeName(0xf000b9e0, "SH_WMGR_SendNotifyMessageW");
MakeName(0xf000b9dc, "SH_WMGR_PostThreadMessageW");
MakeName(0xf000b9d8, "SH_WMGR_TranslateAcceleratorW");
MakeName(0xf000b9d4, "SH_WMGR_GetKeyboardLayout");
MakeName(0xf000b9d0, "SH_WMGR_GetKeyboardLayoutList");
MakeName(0xf000b9cc, "SH_WMGR_GetKeyboardType");
MakeName(0xf000b9c8, "SH_WMGR_ImageList_Create");
MakeName(0xf000b9c4, "SH_WMGR_ImageList_Destroy");
MakeName(0xf000b9c0, "SH_WMGR_ImageList_GetImageCount");
MakeName(0xf000b9bc, "SH_WMGR_ImageList_Add");
MakeName(0xf000b9b8, "SH_WMGR_ImageList_ReplaceIcon");
MakeName(0xf000b9b4, "SH_WMGR_ImageList_SetBkColor");
MakeName(0xf000b9b0, "SH_WMGR_ImageList_GetBkColor");
MakeName(0xf000b9ac, "SH_WMGR_ImageList_SetOverlayImage");
MakeName(0xf000b9a8, "SH_WMGR_ImageList_Draw");
MakeName(0xf000b9a4, "SH_WMGR_ImageList_Replace");
MakeName(0xf000b9a0, "SH_WMGR_ImageList_AddMasked");
MakeName(0xf000b99c, "SH_WMGR_ImageList_DrawEx");
MakeName(0xf000b998, "SH_WMGR_ImageList_Remove");
MakeName(0xf000b994, "SH_WMGR_ImageList_GetIcon");
MakeName(0xf000b990, "SH_WMGR_ImageList_LoadImage");
MakeName(0xf000b98c, "SH_WMGR_ImageList_BeginDrag");
MakeName(0xf000b988, "SH_WMGR_ImageList_EndDrag");
MakeName(0xf000b984, "SH_WMGR_ImageList_DragEnter");
MakeName(0xf000b980, "SH_WMGR_ImageList_DragLeave");
MakeName(0xf000b97c, "SH_WMGR_ImageList_DragMove");
MakeName(0xf000b978, "SH_WMGR_ImageList_SetDragCursorImage");
MakeName(0xf000b974, "SH_WMGR_AudioUpdateFromRegistry");
MakeName(0xf000b970, "SH_WMGR_ScrollDC");
MakeName(0xf000b96c, "SH_WMGR_ScrollWindowEx");
MakeName(0xf000b968, "SH_WMGR_OpenClipboard");
MakeName(0xf000b964, "SH_WMGR_CloseClipboard");
MakeName(0xf000b960, "SH_WMGR_GetClipboardOwner");
MakeName(0xf000b95c, "SH_WMGR_SetClipboardData");
MakeName(0xf000b958, "SH_WMGR_GetClipboardDataGwe");
MakeName(0xf000b954, "SH_WMGR_RegisterClipboardFormatW");
MakeName(0xf000b950, "SH_WMGR_CountClipboardFormats");
MakeName(0xf000b94c, "SH_WMGR_EnumClipboardFormats");
MakeName(0xf000b948, "SH_WMGR_GetClipboardFormatNameW");
MakeName(0xf000b944, "SH_WMGR_EmptyClipboard");
MakeName(0xf000b940, "SH_WMGR_IsClipboardFormatAvailable");
MakeName(0xf000b93c, "SH_WMGR_GetPriorityClipboardFormat");
MakeName(0xf000b938, "SH_WMGR_GetOpenClipboardWindow");
MakeName(0xf000b934, "SH_WMGR_MessageBeep");
MakeName(0xf000b930, "SH_WMGR_SystemIdleTimerReset");
MakeName(0xf000b92c, "SH_WMGR_SystemIdleTimerUpdateMax");
MakeName(0xf000b928, "SH_WMGR_Unused182");
MakeName(0xf000b924, "SH_WMGR_SetKeyboardTarget");
MakeName(0xf000b920, "SH_WMGR_GetKeyboardTarget");
MakeName(0xf000b91c, "SH_WMGR_NotifyWinUserSystem");
MakeName(0xf000b918, "SH_WMGR_SetMenuItemInfoW");
MakeName(0xf000b914, "SH_WMGR_GetMenuItemInfoW");
MakeName(0xf000b910, "SH_WMGR_SetCaretBlinkTime");
MakeName(0xf000b90c, "SH_WMGR_GetCaretBlinkTime");
MakeName(0xf000b908, "SH_WMGR_GetMessagePos");
MakeName(0xf000b904, "SH_WMGR_QASetWindowsJournalHook");
MakeName(0xf000b900, "SH_WMGR_QAUnhookWindowsJournalHook");
MakeName(0xf000b8fc, "SH_WMGR_NLedGetDeviceInfo");
MakeName(0xf000b8f8, "SH_WMGR_NLedSetDevice");
MakeName(0xf000b8f4, "SH_WMGR_EnumWindows_Trap");
MakeName(0xf000b8f0, "SH_WMGR_RectangleAnimation");
MakeName(0xf000b8ec, "SH_WMGR_MapDialogRect");
MakeName(0xf000b8e8, "SH_WMGR_GetSystemPowerStatusEx");
MakeName(0xf000b8e4, "SH_WMGR_GetDialogBaseUnits");
MakeName(0xf000b8e0, "SH_WMGR_GetDoubleClickTime");
MakeName(0xf000b8dc, "SH_WMGR_GetWindowThreadProcessId");
MakeName(0xf000b8d8, "SH_WMGR_CreateIconIndirect");
MakeName(0xf000b8d4, "SH_WMGR_ShellModalEnd");
MakeName(0xf000b8d0, "SH_WMGR_TouchCalibrate");
MakeName(0xf000b8cc, "SH_WMGR_BatteryGetLifeTimeInfo");
MakeName(0xf000b8c8, "SH_WMGR_BatteryDrvrGetLevels");
MakeName(0xf000b8c4, "SH_WMGR_GwesPowerOffSystem");
MakeName(0xf000b8c0, "SH_WMGR_BatteryNotifyOfTimeChange");
MakeName(0xf000b8bc, "SH_WMGR_LoadCursorW_Trap");
MakeName(0xf000b8b8, "SH_WMGR_SetCursor");
MakeName(0xf000b8b4, "SH_WMGR_DestroyCursor_Trap");
MakeName(0xf000b8b0, "SH_WMGR_DisableCaretSystemWide");
MakeName(0xf000b8ac, "SH_WMGR_EnableCaretSystemWide");
MakeName(0xf000b8a8, "SH_WMGR_GetMouseMovePoints");
MakeName(0xf000b8a4, "SH_WMGR_BatteryDrvrSupportsChangeNotification");
MakeName(0xf000b8a0, "SH_WMGR_EnableHardwareKeyboard");
MakeName(0xf000b89c, "SH_WMGR_GetKeyboardStatus");
MakeName(0xf000b898, "SH_WMGR_RegisterSIPanel");
MakeName(0xf000b894, "SH_WMGR_GetAsyncShiftFlags");
MakeName(0xf000b890, "SH_WMGR_MsgWaitForMultipleObjectsEx");
MakeName(0xf000b88c, "SH_WMGR_SetAssociatedMenu");
MakeName(0xf000b888, "SH_WMGR_GetAssociatedMenu");
MakeName(0xf000b884, "SH_WMGR_DrawMenuBar");
MakeName(0xf000b880, "SH_WMGR_SetSysColors");
MakeName(0xf000b87c, "SH_WMGR_DrawFrameControl");
MakeName(0xf000b878, "SH_WMGR_CreateCursor_Trap");
MakeName(0xf000b874, "SH_WMGR_RegisterWindowMessageW");
MakeName(0xf000b870, "SH_WMGR_SystemParametersInfo_GWE_Trap");
MakeName(0xf000b86c, "SH_WMGR_SendInput");
MakeName(0xf000b868, "SH_WMGR_SendDlgItemMessageW");
MakeName(0xf000b864, "SH_WMGR_SetDlgItemTextW");
MakeName(0xf000b860, "SH_WMGR_GetDlgItemTextW");
MakeName(0xf000b85c, "SH_WMGR_GetMessageSource_Trap");
MakeName(0xf000b858, "SH_WMGR_RegisterHotKey_Trap");
MakeName(0xf000b854, "SH_WMGR_UnregisterHotKey_Trap");
MakeName(0xf000b850, "SH_WMGR_ImageList_Copy");
MakeName(0xf000b84c, "SH_WMGR_ImageList_Duplicate");
MakeName(0xf000b848, "SH_WMGR_ImageList_SetImageCount");
MakeName(0xf000b844, "SH_WMGR_UnregisterFunc1_Trap");
MakeName(0xf000b840, "SH_WMGR_ImmGetContextFromWindowGwe");
MakeName(0xf000b83c, "SH_WMGR_ImmAssociateContextWithWindowGwe");
MakeName(0xf000b838, "SH_WMGR_ImmSetHotKey");
MakeName(0xf000b834, "SH_WMGR_BeginDeferWindowPos_Trap");
MakeName(0xf000b830, "SH_WMGR_DeferWindowPos_Trap");
MakeName(0xf000b82c, "SH_WMGR_EndDeferWindowPos_Trap");
MakeName(0xf000b828, "SH_WMGR_ImmGetHotKey");
MakeName(0xf000b824, "SH_WMGR_GetDCEx_Trap");
MakeName(0xf000b820, "SH_WMGR_GwesPowerDown");
MakeName(0xf000b81c, "SH_WMGR_GwesPowerUp");
MakeName(0xf000b810, "SH_WMGR_LoadKeyboardLayoutW");
MakeName(0xf000b80c, "SH_WMGR_ActivateKeyboardLayout");
MakeName(0xf000b808, "SH_WMGR_GetSystemPowerStatusEx2");
MakeName(0xf000b804, "SH_WMGR_GetKeyboardLayoutNameW");
MakeName(0xf000b7fc, "SH_WNET_WNetAddConnection3W");
MakeName(0xf000b7f8, "SH_WNET_WNetCancelConnection2W");
MakeName(0xf000b7f4, "SH_WNET_WNetConnectionDialog1W");
MakeName(0xf000b7f0, "SH_WNET_WNetDisconnectDialog");
MakeName(0xf000b7ec, "SH_WNET_WNetDisconnectDialog1W");
MakeName(0xf000b7e8, "SH_WNET_WNetGetConnectionW");
MakeName(0xf000b7e4, "SH_WNET_WNetGetUniversalNameW");
MakeName(0xf000b7e0, "SH_WNET_WNetGetUserW");
MakeName(0xf000b7dc, "SH_WNET_WNetOpenEnumW");
MakeName(0xf000b3f8, "SH_COMM_AFDSocket");
MakeName(0xf000b3f4, "SH_COMM_AFDControl");
MakeName(0xf000b3f0, "SH_COMM_AFDEnumProtocolsW");
MakeName(0xf000b3ec, "SH_COMM_RasDial");
MakeName(0xf000b3e8, "SH_COMM_RasHangup");
MakeName(0xf000b3e4, "SH_COMM_AFDGetHostentByAttr");
MakeName(0xf000b3e0, "SH_COMM_AFDAddIPHostent");
MakeName(0xf000b3dc, "SH_COMM_RasIOControl");
MakeName(0xf000b3d8, "SH_COMM_AFDSelect");
MakeName(0xf000b3d4, "SH_COMM_RasEnumEntries");
MakeName(0xf000b3d0, "SH_COMM_RasGetEntryDialParams");
MakeName(0xf000b3cc, "SH_COMM_RasSetEntryDialParams");
MakeName(0xf000b3c8, "SH_COMM_RasGetEntryProperties");
MakeName(0xf000b3c4, "SH_COMM_RasSetEntryProperties");
MakeName(0xf000b3c0, "SH_COMM_RasValidateEntryName");
MakeName(0xf000b3bc, "SH_COMM_RasDeleteEntry");
MakeName(0xf000b3b8, "SH_COMM_RasRenameEntry");
MakeName(0xf000b3b4, "SH_COMM_AFDAddInterface");
MakeName(0xf000b3b0, "SH_COMM_RasEnumConnections");
MakeName(0xf000b3ac, "SH_COMM_RasGetConnectStatus");
MakeName(0xf000b3a8, "SH_COMM_RasGetEntryDevConfig");
MakeName(0xf000b3a4, "SH_COMM_RasSetEntryDevConfig");
MakeName(0xf000b3a0, "SH_COMM_NETbios");
MakeName(0xf000b398, "SH_COMM_PMInstallProvider");
MakeName(0xf000b394, "SH_COMM_PMEnumProtocols");
MakeName(0xf000b390, "SH_COMM_PMFindProvider");
MakeName(0xf000b38c, "SH_COMM_PMInstallNameSpace");
MakeName(0xf000b388, "SH_COMM_PMEnumNameSpaceProviders");
MakeName(0xf000b384, "SH_COMM_PMFindNameSpaces");
MakeName(0xf000b380, "SH_COMM_PMAddrConvert");
MakeName(0xf000aff8, "SH_FILESYS_APIS_CreateDirectoryW");
MakeName(0xf000aff4, "SH_FILESYS_APIS_RemoveDirectoryW");
MakeName(0xf000aff0, "SH_FILESYS_APIS_MoveFileW");
MakeName(0xf000afec, "SH_FILESYS_APIS_CopyFileW");
MakeName(0xf000afe8, "SH_FILESYS_APIS_DeleteFileW");
MakeName(0xf000afe4, "SH_FILESYS_APIS_GetFileAttributesW");
MakeName(0xf000afe0, "SH_FILESYS_APIS_FindFirstFileW");
MakeName(0xf000afdc, "SH_FILESYS_APIS_CreateFileW");
MakeName(0xf000afd8, "SH_FILESYS_APIS_CeRegisterFileSystemNotification");
MakeName(0xf000afd4, "SH_FILESYS_APIS_CeRegisterReplNotification");
MakeName(0xf000afd0, "SH_FILESYS_APIS_CeOidGetInfoEx2");
MakeName(0xf000afcc, "SH_FILESYS_APIS_CeFindFirstDatabaseEx");
MakeName(0xf000afc8, "SH_FILESYS_APIS_CeCreateDatabaseEx2");
MakeName(0xf000afc4, "SH_FILESYS_APIS_CeSetDatabaseInfoEx2");
MakeName(0xf000afc0, "SH_FILESYS_APIS_CeOpenDatabaseEx2");
MakeName(0xf000afbc, "SH_FILESYS_APIS_RegCloseKey");
MakeName(0xf000afb8, "SH_FILESYS_APIS_RegCreateKeyExW");
MakeName(0xf000afb4, "SH_FILESYS_APIS_RegDeleteKeyW");
MakeName(0xf000afb0, "SH_FILESYS_APIS_RegDeleteValueW");
MakeName(0xf000afac, "SH_FILESYS_APIS_RegEnumValueW");
MakeName(0xf000afa8, "SH_FILESYS_APIS_RegEnumKeyExW");
MakeName(0xf000afa4, "SH_FILESYS_APIS_RegOpenKeyExW");
MakeName(0xf000afa0, "SH_FILESYS_APIS_RegQueryInfoKeyW");
MakeName(0xf000af9c, "SH_FILESYS_APIS_RegQueryValueExW");
MakeName(0xf000af98, "SH_FILESYS_APIS_RegSetValueExW");
MakeName(0xf000af94, "SH_FILESYS_APIS_GetTempPathW");
MakeName(0xf000af90, "SH_FILESYS_APIS_CeDeleteDatabaseEx");
MakeName(0xf000af8c, "SH_FILESYS_APIS_CheckPassword");
MakeName(0xf000af88, "SH_FILESYS_APIS_SetPassword");
MakeName(0xf000af84, "SH_FILESYS_APIS_SetFileAttributesW");
MakeName(0xf000af80, "SH_FILESYS_APIS_GetStoreInformation");
MakeName(0xf000af7c, "SH_FILESYS_APIS_CeGetReplChangeMask");
MakeName(0xf000af78, "SH_FILESYS_APIS_CeSetReplChangeMask");
MakeName(0xf000af74, "SH_FILESYS_APIS_CeGetReplChangeBitsEx");
MakeName(0xf000af70, "SH_FILESYS_APIS_CeClearReplChangeBitsEx");
MakeName(0xf000af6c, "SH_FILESYS_APIS_CeGetReplOtherBitsEx");
MakeName(0xf000af68, "SH_FILESYS_APIS_CeSetReplOtherBitsEx");
MakeName(0xf000af64, "SH_FILESYS_APIS_GetSystemMemoryDivision");
MakeName(0xf000af60, "SH_FILESYS_APIS_SetSystemMemoryDivision");
MakeName(0xf000af5c, "SH_FILESYS_APIS_RegCopyFile");
MakeName(0xf000af58, "SH_FILESYS_APIS_CloseAllFileHandles");
MakeName(0xf000af54, "SH_FILESYS_APIS_DeleteAndRenameFile");
MakeName(0xf000af50, "SH_FILESYS_APIS_RegRestoreFile");
MakeName(0xf000af4c, "SH_FILESYS_APIS_RegisterAFSEx");
MakeName(0xf000af48, "SH_FILESYS_APIS_DeregisterAFS");
MakeName(0xf000af44, "SH_FILESYS_APIS_GetPasswordActive");
MakeName(0xf000af40, "SH_FILESYS_APIS_SetPasswordActive");
MakeName(0xf000af3c, "SH_FILESYS_APIS_RegFlushKey");
MakeName(0xf000af38, "SH_FILESYS_APIS_FileSystemPowerFunction");
MakeName(0xf000af34, "SH_FILESYS_APIS_CeSetReplChangeBitsEx");
MakeName(0xf000af30, "SH_FILESYS_APIS_RegisterAFSName");
MakeName(0xf000af2c, "SH_FILESYS_APIS_DeregisterAFSName");
MakeName(0xf000af28, "SH_FILESYS_APIS_GetDiskFreeSpaceExW");
MakeName(0xf000af24, "SH_FILESYS_APIS_IsSystemFile");
MakeName(0xf000af20, "SH_FILESYS_APIS_CeChangeDatabaseLCID");
MakeName(0xf000af1c, "SH_FILESYS_APIS_DumpFileSystemHeap");
MakeName(0xf000af18, "SH_FILESYS_APIS_CeMountDBVol");
MakeName(0xf000af14, "SH_FILESYS_APIS_CeEnumDBVolumes");
MakeName(0xf000af10, "SH_FILESYS_APIS_CeUnmountDBVol");
MakeName(0xf000af0c, "SH_FILESYS_APIS_CeFlushDBVol");
MakeName(0xf000af08, "SH_FILESYS_APIS_CeFreeNotification");
MakeName(0xf000af04, "SH_FILESYS_APIS_FindFirstFileExW");
MakeName(0xf000af00, "SH_FILESYS_APIS_RegSaveKey");
MakeName(0xf000aefc, "SH_FILESYS_APIS_RegReplaceKey");
MakeName(0xf000aef8, "SH_FILESYS_APIS_SignalStarted");
MakeName(0xf000aef4, "SH_FILESYS_APIS_SetCurrentUser");
MakeName(0xf000aef0, "SH_FILESYS_APIS_SetUserData");
MakeName(0xf000aeec, "SH_FILESYS_APIS_GetUserInformation");
MakeName(0xf000aee8, "SH_FILESYS_APIS_SetPasswordStatus");
MakeName(0xf000aee4, "SH_FILESYS_APIS_GetPasswordStatus");
MakeName(0xf000aee0, "SH_FILESYS_APIS_ReplOpenSync");
MakeName(0xf000aedc, "SH_FILESYS_APIS_ReplCheckpoint");
MakeName(0xf000aed8, "SH_FILESYS_APIS_ReplCloseSync");
MakeName(0xf000aed4, "SH_FILESYS_APIS_ReplGetSyncState");
MakeName(0xf000aed0, "SH_FILESYS_APIS_ReplChangeSyncSettings");
MakeName(0xf000aecc, "SH_FILESYS_APIS_ReplFindNextChange");
MakeName(0xf000aec8, "SH_FILESYS_APIS_ReplGetOidStatus");
MakeName(0xf000aec4, "SH_FILESYS_APIS_CreateMsgQueue");
MakeName(0xf000aec0, "SH_FILESYS_APIS_OpenMsgQueue");
MakeName(0xf000aebc, "SH_FILESYS_APIS_ReadMsgQueue");
MakeName(0xf000aeb8, "SH_FILESYS_APIS_WriteMsgQueue");
MakeName(0xf000aeb4, "SH_FILESYS_APIS_GetMsgQueueInfo");
MakeName(0xf000aeb0, "SH_FILESYS_APIS_CloseMsgQueue");
MakeName(0xf000aeac, "SH_FILESYS_APIS_CryptProtectData");
MakeName(0xf000aea8, "SH_FILESYS_APIS_CryptUnprotectData");
MakeName(0xf000aea4, "SH_FILESYS_APIS_GenRandom");
MakeName(0xf000aea0, "SH_FILESYS_APIS_FindFirstChangeNotificationW");
MakeName(0xf000ae9c, "SH_FILESYS_APIS_FindNextChangeNotification");
MakeName(0xf000ae98, "SH_FILESYS_APIS_FindCloseChangeNotification");
MakeName(0xf000ae94, "SH_FILESYS_APIS_CeGetFileNotificationInfo");
MakeName(0xf000abf4, "SH_SHELL_GetOpenFileNameW");
MakeName(0xf000abf0, "SH_SHELL_GetSaveFileNameW");
MakeName(0xf000abe8, "SH_SHELL_Shell_NotifyIcon");
MakeName(0xf000abe4, "SH_SHELL_SHAddToRecentDocs");
MakeName(0xf000abdc, "SH_SHELL_SHCreateExplorerInstance");
MakeName(0xf000ab94, "SH_SHELL_NotSystemParametersInfo_Trap");
MakeName(0xf000ab90, "SH_SHELL_SHGetAppKeyAssoc_Trap");
MakeName(0xf000ab8c, "SH_SHELL_SHSetAppKeyWndAssoc_Trap");
MakeName(0xf000ab78, "SH_SHELL_SHFileNotifyRemove_Trap");
MakeName(0xf000ab74, "SH_SHELL_SHFileNotifyFree_Trap");
MakeName(0xf000ab6c, "SH_SHELL_SHCloseApps_Trap");
MakeName(0xf000ab68, "SH_SHELL_SHSipPreference_Trap");
MakeName(0xf000ab5c, "SH_SHELL_SHSetNavBarText_Trap");
MakeName(0xf000ab58, "SH_SHELL_SHDoneButton_Trap");
MakeName(0xf000ab38, "SH_SHELL_SHChangeNotifyRegister_Trap");
MakeName(0xf000ab24, "SH_SHELL_SHNotificationAdd_Trap");
MakeName(0xf000ab20, "SH_SHELL_SHNotificationUpdate_Trap");
MakeName(0xf000ab1c, "SH_SHELL_SHNotificationRemove_Trap");
MakeName(0xf000ab18, "SH_SHELL_SHNotificationGetData_Trap");
MakeName(0xf000aadc, "SH_SHELL_SendChangeNotificationToWindow_Trap");
MakeName(0xf000a7f8, "SH_DEVMGR_APIS_RegisterDevice");
MakeName(0xf000a7f4, "SH_DEVMGR_APIS_DeregisterDevice");
MakeName(0xf000a7f0, "SH_DEVMGR_APIS_CloseAllDeviceHandles");
MakeName(0xf000a7ec, "SH_DEVMGR_APIS_CreateDeviceHandle");
MakeName(0xf000a7e8, "SH_DEVMGR_APIS_LoadFSD");
MakeName(0xf000a7e0, "SH_DEVMGR_APIS_DeactivateDevice");
MakeName(0xf000a7dc, "SH_DEVMGR_APIS_LoadFSDEx");
MakeName(0xf000a7d8, "SH_DEVMGR_APIS_GetDeviceByIndex");
MakeName(0xf000a7d4, "SH_DEVMGR_APIS_CeResyncFilesys");
MakeName(0xf000a7d0, "SH_DEVMGR_APIS_ActivateDeviceEx");
MakeName(0xf000a7cc, "SH_DEVMGR_APIS_RequestDeviceNotifications");
MakeName(0xf000a7c8, "SH_DEVMGR_APIS_StopDeviceNotifications");
MakeName(0xf000a7c4, "SH_DEVMGR_APIS__GetDevicePathFromPnp");
MakeName(0xf000a7c0, "SH_DEVMGR_APIS_ResourceCreateList");
MakeName(0xf000a7bc, "SH_DEVMGR_APIS_ResourceAdjust");
MakeName(0xf000a7b8, "SH_DEVMGR_APIS_GetSystemPowerState");
MakeName(0xf000a7b4, "SH_DEVMGR_APIS_SetSystemPowerState");
MakeName(0xf000a7b0, "SH_DEVMGR_APIS_SetPowerRequirement");
MakeName(0xf000a7ac, "SH_DEVMGR_APIS_ReleasePowerRequirement");
MakeName(0xf000a7a8, "SH_DEVMGR_APIS_RequestPowerNotifications");
MakeName(0xf000a7a4, "SH_DEVMGR_APIS_StopPowerNotifications");
MakeName(0xf000a79c, "SH_DEVMGR_APIS_DevicePowerNotify");
MakeName(0xf000a798, "SH_DEVMGR_APIS_RegisterPowerRelationship");
MakeName(0xf000a794, "SH_DEVMGR_APIS_ReleasePowerRelationship");
MakeName(0xf000a790, "SH_DEVMGR_APIS_SetDevicePower");
MakeName(0xf000a78c, "SH_DEVMGR_APIS_GetDevicePower");
MakeName(0xf000a788, "SH_DEVMGR_APIS_AdvertiseInterface");
MakeName(0xf000a3f8, "SH_TAPI_lineClose");
MakeName(0xf000a3f4, "SH_TAPI_lineConfigDialogEdit");
MakeName(0xf000a3f0, "SH_TAPI_lineDeallocateCall");
MakeName(0xf000a3ec, "SH_TAPI_lineDrop");
MakeName(0xf000a3e8, "SH_TAPI_lineGetDevCaps");
MakeName(0xf000a3e4, "SH_TAPI_lineGetDevConfig");
MakeName(0xf000a3e0, "SH_TAPI_lineGetTranslateCaps");
MakeName(0xf000a3dc, "SH_TAPI_TAPIlineInitialize");
MakeName(0xf000a3d8, "SH_TAPI_lineMakeCall");
MakeName(0xf000a3d4, "SH_TAPI_lineNegotiateAPIVersion");
MakeName(0xf000a3d0, "SH_TAPI_lineOpen");
MakeName(0xf000a3cc, "SH_TAPI_lineSetDevConfig");
MakeName(0xf000a3c8, "SH_TAPI_lineSetStatusMessages");
MakeName(0xf000a3c4, "SH_TAPI_TAPIlineShutdown");
MakeName(0xf000a3c0, "SH_TAPI_lineTranslateAddress");
MakeName(0xf000a3bc, "SH_TAPI_lineTranslateDialog");
MakeName(0xf000a3b8, "SH_TAPI_lineGetID");
MakeName(0xf000a3b4, "SH_TAPI_lineAddProvider");
MakeName(0xf000a3b0, "SH_TAPI_lineSetCurrentLocation");
MakeName(0xf000a3ac, "SH_TAPI_lineAccept");
MakeName(0xf000a3a8, "SH_TAPI_lineAddToConference");
MakeName(0xf000a3a4, "SH_TAPI_lineAnswer");
MakeName(0xf000a3a0, "SH_TAPI_lineBlindTransfer");
MakeName(0xf000a39c, "SH_TAPI_lineCompleteTransfer");
MakeName(0xf000a398, "SH_TAPI_lineDevSpecific");
MakeName(0xf000a394, "SH_TAPI_lineDial");
MakeName(0xf000a390, "SH_TAPI_lineForward");
MakeName(0xf000a38c, "SH_TAPI_lineGenerateDigits");
MakeName(0xf000a388, "SH_TAPI_lineGenerateTone");
MakeName(0xf000a384, "SH_TAPI_lineGetAddressCaps");
MakeName(0xf000a380, "SH_TAPI_lineGetAddressID");
MakeName(0xf000a37c, "SH_TAPI_lineGetAddressStatus");
MakeName(0xf000a378, "SH_TAPI_lineGetAppPriority");
MakeName(0xf000a374, "SH_TAPI_lineGetCallInfo");
MakeName(0xf000a370, "SH_TAPI_lineGetCallStatus");
MakeName(0xf000a36c, "SH_TAPI_lineGetConfRelatedCalls");
MakeName(0xf000a368, "SH_TAPI_lineGetIcon");
MakeName(0xf000a364, "SH_TAPI_lineGetLineDevStatus");
MakeName(0xf000a360, "SH_TAPI_lineGetMessage");
MakeName(0xf000a35c, "SH_TAPI_lineGetNewCalls");
MakeName(0xf000a358, "SH_TAPI_lineGetNumRings");
MakeName(0xf000a354, "SH_TAPI_lineGetProviderList");
MakeName(0xf000a350, "SH_TAPI_lineGetStatusMessages");
MakeName(0xf000a34c, "SH_TAPI_lineHandoff");
MakeName(0xf000a348, "SH_TAPI_lineHold");
MakeName(0xf000a344, "SH_TAPI_TAPIlineInitializeEx");
MakeName(0xf000a340, "SH_TAPI_lineMonitorDigits");
MakeName(0xf000a33c, "SH_TAPI_lineMonitorMedia");
MakeName(0xf000a338, "SH_TAPI_lineNegotiateExtVersion");
MakeName(0xf000a334, "SH_TAPI_linePickup");
MakeName(0xf000a330, "SH_TAPI_linePrepareAddToConference");
MakeName(0xf000a32c, "SH_TAPI_lineRedirect");
MakeName(0xf000a328, "SH_TAPI_lineReleaseUserUserInfo");
MakeName(0xf000a324, "SH_TAPI_lineRemoveFromConference");
MakeName(0xf000a320, "SH_TAPI_lineSendUserUserInfo");
MakeName(0xf000a31c, "SH_TAPI_lineSetAppPriority");
MakeName(0xf000a318, "SH_TAPI_lineSetCallParams");
MakeName(0xf000a314, "SH_TAPI_lineSetCallPrivilege");
MakeName(0xf000a310, "SH_TAPI_lineSetMediaMode");
MakeName(0xf000a30c, "SH_TAPI_lineSetNumRings");
MakeName(0xf000a308, "SH_TAPI_lineSetTerminal");
MakeName(0xf000a304, "SH_TAPI_lineSetTollList");
MakeName(0xf000a300, "SH_TAPI_lineSetupConference");
MakeName(0xf000a2fc, "SH_TAPI_lineSetupTransfer");
MakeName(0xf000a2f8, "SH_TAPI_lineSwapHold");
MakeName(0xf000a2f4, "SH_TAPI_lineUnhold");
MakeName(0xf000a2f0, "SH_TAPI_phoneClose");
MakeName(0xf000a2ec, "SH_TAPI_phoneConfigDialog");
MakeName(0xf000a2e8, "SH_TAPI_phoneDevSpecific");
MakeName(0xf000a2e4, "SH_TAPI_phoneGetDevCaps");
MakeName(0xf000a2e0, "SH_TAPI_phoneGetGain");
MakeName(0xf000a2dc, "SH_TAPI_phoneGetHookSwitch");
MakeName(0xf000a2d8, "SH_TAPI_phoneGetIcon");
MakeName(0xf000a2d4, "SH_TAPI_phoneGetID");
MakeName(0xf000a2d0, "SH_TAPI_phoneGetMessage");
MakeName(0xf000a2cc, "SH_TAPI_phoneGetRing");
MakeName(0xf000a2c8, "SH_TAPI_phoneGetStatus");
MakeName(0xf000a2c4, "SH_TAPI_phoneGetStatusMessages");
MakeName(0xf000a2c0, "SH_TAPI_phoneGetVolume");
MakeName(0xf000a2bc, "SH_TAPI_TAPIphoneInitializeEx");
MakeName(0xf000a2b8, "SH_TAPI_phoneNegotiateAPIVersion");
MakeName(0xf000a2b4, "SH_TAPI_phoneNegotiateExtVersion");
MakeName(0xf000a2b0, "SH_TAPI_phoneOpen");
MakeName(0xf000a2ac, "SH_TAPI_phoneSetGain");
MakeName(0xf000a2a8, "SH_TAPI_phoneSetHookSwitch");
MakeName(0xf000a2a4, "SH_TAPI_phoneSetRing");
MakeName(0xf000a2a0, "SH_TAPI_phoneSetStatusMessages");
MakeName(0xf000a29c, "SH_TAPI_phoneSetVolume");
MakeName(0xf000a298, "SH_TAPI_TAPIphoneShutdown");
MakeName(0xf0009ff8, "SH_PATCHER_PatchExe");
MakeName(0xf0009ff4, "SH_PATCHER_PatchDll");
MakeName(0xf0009ff0, "SH_PATCHER_FreeDllPatch");
MakeName(0xf00097f8, "SH_SERVICES_ActivateService");
MakeName(0xf00097f4, "SH_SERVICES_RegisterService");
MakeName(0xf00097f0, "SH_SERVICES_DeregisterService");
MakeName(0xf00097ec, "SH_SERVICES_CloseAllServiceHandles");
MakeName(0xf00097e8, "SH_SERVICES_CreateServiceHandle");
MakeName(0xf00097e4, "SH_SERVICES_GetServiceByIndex");
MakeName(0xf00097e0, "SH_SERVICES_ServiceIoControl");
MakeName(0xf00097dc, "SH_SERVICES_ServiceAddPort");
MakeName(0xf00097d8, "SH_SERVICES_ServiceUnbindPorts");
MakeName(0xf00097d4, "SH_SERVICES_EnumServices");
MakeName(0xf00097d0, "SH_SERVICES_GetServiceHandle");
MakeName(0xf00097cc, "SH_SERVICES_ServiceClosePort");

}

static mk_structs5() {
auto i,o;
i= AddStrucEx(-1, "struc_CeLogImportTable", 0);
o=0;
AddStrucMember(i, "dwVersion", 4*o++, FF_DWRD|FF_DATA,0,4);
AddStrucMember(i, "pCreateEventW", 4*o++, FF_DWRD|FF_DATA,0,4);
AddStrucMember(i, "pEventModify", 4*o++, FF_DWRD|FF_DATA,0,4);
AddStrucMember(i, "pCreateFileMappingW", 4*o++, FF_DWRD|FF_DATA,0,4);
AddStrucMember(i, "pMapViewOfFile", 4*o++, FF_DWRD|FF_DATA,0,4);
AddStrucMember(i, "pUnmapViewOfFile", 4*o++, FF_DWRD|FF_DATA,0,4);
AddStrucMember(i, "pCloseHandle", 4*o++, FF_DWRD|FF_DATA,0,4);
AddStrucMember(i, "pLockPages", 4*o++, FF_DWRD|FF_DATA,0,4);
AddStrucMember(i, "pUnlockPages", 4*o++, FF_DWRD|FF_DATA,0,4);
AddStrucMember(i, "pVirtualAlloc", 4*o++, FF_DWRD|FF_DATA,0,4);
AddStrucMember(i, "pVirtualFree", 4*o++, FF_DWRD|FF_DATA,0,4);
AddStrucMember(i, "pMapPtrToProcess", 4*o++, FF_DWRD|FF_DATA,0,4);
AddStrucMember(i, "pQueryPerformanceCounter", 4*o++, FF_DWRD|FF_DATA,0,4);
AddStrucMember(i, "pQueryPerformanceFrequency", 4*o++, FF_DWRD|FF_DATA,0,4);
AddStrucMember(i, "pNKDbgPrintfW", 4*o++, FF_DWRD|FF_DATA,0,4);
AddStrucMember(i, "pCeLogReSync", 4*o++, FF_DWRD|FF_DATA,0,4);
AddStrucMember(i, "pGetLastError", 4*o++, FF_DWRD|FF_DATA,0,4);
AddStrucMember(i, "pSetLastError", 4*o++, FF_DWRD|FF_DATA,0,4);
AddStrucMember(i, "pGetThreadCallStack", 4*o++, FF_DWRD|FF_DATA,0,4);
AddStrucMember(i, "pInSysCall", 4*o++, FF_DWRD|FF_DATA,0,4);
AddStrucMember(i, "pdwCeLogTLBMiss", 4*o++, FF_DWRD|FF_DATA,0,4);
AddStrucMember(i, "dwCeLogLargeBuf", 4*o++, FF_DWRD|FF_DATA,0,4);
AddStrucMember(i, "dwCeLogSmallBuf", 4*o++, FF_DWRD|FF_DATA,0,4);
AddStrucMember(i, "dwDefaultThreadQuantum", 4*o++, FF_DWRD|FF_DATA,0,4);

}
static mk_structs(wm5) {
auto idt, idctx, idintr;
auto idoe, idinfo, ide32, idpgp, idp;
auto ici;
auto ido32;

ici= AddStrucEx(-1, "struc_CINFO", 0);
AddStrucMember(ici, "acName", 0, FF_ASCI|FF_DATA, 0, 4);
AddStrucMember(ici, "disp", 4, FF_BYTE|FF_DATA, 0, 1);
AddStrucMember(ici, "type", 5, FF_BYTE|FF_DATA, 0, 1);
AddStrucMember(ici, "cMethods", 6, FF_WORD|FF_DATA, 0, 2);
AddStrucMember(ici, "ppfnMethods", 8, FF_DWRD|FF_DATA|FF_0OFF, 0, 4);
AddStrucMember(ici, "pdwSig", 0xc, FF_DWRD|FF_DATA|FF_0OFF, 0, 4);
AddStrucMember(ici, "pServer", 0x10, FF_DWRD|FF_DATA, 0, 4);

idctx= AddStrucEx(-1, "struc_CPUCONTEXT", 0);
AddStrucMember(idctx, "Psr", 0x0060-0x60, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idctx, "reg_R0", 0x0064-0x60, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idctx, "reg_R1", 0x0068-0x60, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idctx, "reg_R2", 0x006c-0x60, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idctx, "reg_R3", 0x0070-0x60, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idctx, "reg_R4", 0x0074-0x60, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idctx, "reg_R5", 0x0078-0x60, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idctx, "reg_R6", 0x007c-0x60, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idctx, "reg_R7", 0x0080-0x60, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idctx, "reg_R8", 0x0084-0x60, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idctx, "reg_R9", 0x0088-0x60, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idctx, "reg_R10", 0x008c-0x60, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idctx, "reg_R11", 0x0090-0x60, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idctx, "reg_R12", 0x0094-0x60, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idctx, "reg_Sp", 0x0098-0x60, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idctx, "reg_Lr", 0x009c-0x60, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idctx, "reg_Pc", 0x00a0-0x60, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idctx, "Fpscr", 0x00a4-0x60, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idctx, "FpExc", 0x00a8-0x60, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idctx, "S", 0x00ac-0x60, FF_DWRD|FF_DATA, 0, 4*33);
AddStrucMember(idctx, "FpExtra", 0x0130-0x60, FF_DWRD|FF_DATA, 0, 4*8);

idintr= AddStrucEx(-1, "struc_CALLSTACK", 0);
AddStrucMember(idintr, "pcstkNext", 0x0214-0x214, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idintr, "retAddr", 0x0218-0x214, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idintr, "pprcLast", 0x021c-0x214, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idintr, "akyLast", 0x0220-0x214, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idintr, "extra", 0x0224-0x214, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idintr, "dwPrevSP", 0x0228-0x214, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idintr, "dwPrcInfo", 0x022c-0x214, FF_DWRD|FF_DATA, 0, 4);


idt= AddStrucEx(-1, "struc_Thread", 0);
AddStrucMember(idt, "wInfo", 0x0000, FF_WORD|FF_DATA, 0, 2);
AddStrucMember(idt, "bSuspendCnt", 0x0002, FF_BYTE|FF_DATA, 0, 1);
AddStrucMember(idt, "bWaitState", 0x0003, FF_BYTE|FF_DATA, 0, 1);
AddStrucMember(idt, "pProxList", 0x0004, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "pNextInProc", 0x0008, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "pProc", 0x000c, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "pOwnerProc", 0x0010, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "aky", 0x0014, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "pcstkTop", 0x0018, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "dwOrigBase", 0x001c, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "dwOrigStkSize", 0x0020, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "tlsPtr", 0x0024, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "dwWakeupTime", 0x0028, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "tlsSecure", 0x002c, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "tlsNonSecure", 0x0030, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "lpProxy", 0x0034, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "dwLastError", 0x0038, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "hTh", 0x003c, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "bBPrio", 0x0040, FF_BYTE|FF_DATA, 0, 1);
AddStrucMember(idt, "bCPrio", 0x0041, FF_BYTE|FF_DATA, 0, 1);
AddStrucMember(idt, "wCount", 0x0042, FF_WORD|FF_DATA, 0, 2);
AddStrucMember(idt, "pPrevInProc", 0x0044, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "pThrdDbg", 0x0048, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "pSwapStack", 0x004c, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "ftCreate_dwLowDateTime", 0x0050, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "ftCreate_dwHighDateTime", 0x0054, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "lpce", 0x0058, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "dwStartAddr", 0x005c, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "ctx", 0x0060, FF_STRU|FF_DATA, idctx, GetStrucSize(idctx));
AddStrucMember(idt, "pNextSleepRun", 0x0150, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "pPrevSleepRun", 0x0154, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "pUpRun", 0x0158, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "pDownRun", 0x015c, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "pUpSleep", 0x0160, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "pDownSleep", 0x0164, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "pOwnedList", 0x0168, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "pOwnedHash", 0x016c, FF_DWRD|FF_DATA, 0, 4*32);
AddStrucMember(idt, "dwQuantum", 0x01ec, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "dwQuantLeft", 0x01f0, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "lpCritProxy", 0x01f4, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "lpPendProxy", 0x01f8, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "dwPendReturn", 0x01fc, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "dwPendTime", 0x0200, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "pCrabPth", 0x0204, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "wCrabCount", 0x0208, FF_WORD|FF_DATA, 0, 2);
AddStrucMember(idt, "wCrabDir", 0x020a, FF_WORD|FF_DATA, 0, 2);
AddStrucMember(idt, "dwPendWakeup", 0x020c, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "wCount2", 0x0210, FF_WORD|FF_DATA, 0, 2);
AddStrucMember(idt, "bPendSusp", 0x0212, FF_BYTE|FF_DATA, 0, 1);
AddStrucMember(idt, "bDbgCnt", 0x0213, FF_BYTE|FF_DATA, 0, 1);
AddStrucMember(idt, "hLastCrit", 0x0214, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "IntrStk", 0x0218, FF_STRU|FF_DATA, idintr, GetStrucSize(idintr));
AddStrucMember(idt, "dwKernTime", 0x0234, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idt, "dwUserTime", 0x0238, FF_DWRD|FF_DATA, 0, 4);
if (wm5) {
    AddStrucMember(idt, "hTok", 0x023c, FF_DWRD|FF_DATA, 0, 4);
}

idoe= AddStrucEx(-1, "struc_openexe_t", 0);
AddStrucMember(idoe, "handle",   0x00, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idoe, "filetype", 0x04, FF_BYTE|FF_DATA, 0, 1);
AddStrucMember(idoe, "bIsOID",   0x05, FF_BYTE|FF_DATA, 0, 1);
AddStrucMember(idoe, "pagemode", 0x06, FF_WORD|FF_DATA, 0, 2);
AddStrucMember(idoe, "offset",   0x08, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idoe, "name",     0x0c, FF_DWRD|FF_DATA, 0, 4);

idinfo= AddStrucEx(-1, "struc_info", 0);
AddStrucMember(idinfo, "rva",    0x00, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idinfo, "size",   0x04, FF_DWRD|FF_DATA, 0, 4);

ide32= AddStrucEx(-1, "struc_e32_lite", 0);
AddStrucMember(ide32, "e32_objcnt",    0x00, FF_WORD|FF_DATA, 0, 2);
AddStrucMember(ide32, "e32_cevermajor",0x02, FF_BYTE|FF_DATA, 0, 1);
AddStrucMember(ide32, "e32_ceverminor",0x03, FF_BYTE|FF_DATA, 0, 1);
AddStrucMember(ide32, "e32_stackmax",  0x04, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(ide32, "e32_vbase",     0x08, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(ide32, "e32_vsize",     0x0c, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(ide32, "e32_sect14rva", 0x10, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(ide32, "e32_sect14size",0x14, FF_DWRD|FF_DATA, 0, 4);
if (wm5) {
    AddStrucMember(ide32, "e32_timestamp",0x18, FF_DWRD|FF_DATA, 0, 4);
}
AddStrucMember(ide32, "e32_unit",    0x18+(wm5?4:0)  , FF_STRU|FF_DATA, idinfo, GetStrucSize(idinfo)*6+(wm5?1:0));

ido32= AddStrucEx(-1, "struc_o32_lite", 0);
AddStrucMember(ido32, "o32_vsize",         0x00, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(ido32, "o32_rva",           0x04, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(ido32, "o32_realaddr",      0x08, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(ido32, "o32_access",        0x0c, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(ido32, "o32_flags",         0x10, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(ido32, "o32_psize",         0x14, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(ido32, "o32_dataptr",       0x18, FF_DWRD|FF_DATA, 0, 4);

idpgp= AddStrucEx(-1, "struc_PGPOOL_Q", 0);
AddStrucMember(idpgp, "idxHead",    0x00, FF_WORD|FF_DATA, 0, 2);
AddStrucMember(idpgp, "idxTail",    0x02, FF_WORD|FF_DATA, 0, 2);

idp= AddStrucEx(-1, "struc_PROCESS", 0);
AddStrucMember(idp, "procnum",       0x00, FF_BYTE|FF_DATA, 0, 1);
AddStrucMember(idp, "DbgActive",     0x01, FF_BYTE|FF_DATA, 0, 1);
AddStrucMember(idp, "bChainDebug",   0x02, FF_BYTE|FF_DATA, 0, 1);
AddStrucMember(idp, "bTrustLevel",   0x03, FF_BYTE|FF_DATA, 0, 1);
AddStrucMember(idp, "pProxList",     0x04, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idp, "hProc",         0x08, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idp, "dwVMBase",      0x0c, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idp, "pTh",           0x10, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idp, "aky",           0x14, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idp, "BasePtr",       0x18, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idp, "hDbgrThrd",     0x1c, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idp, "lpszProcName",  0x20, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idp, "tlsLowUsed",    0x24, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idp, "tlsHighUsed",   0x28, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idp, "pfnEH",         0x2c, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idp, "ZonePtr",       0x30, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idp, "pMainTh",       0x34, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idp, "pmodResource",  0x38, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idp, "pStdNames",     0x3c, FF_DWRD|FF_DATA, 0, 4*3);
AddStrucMember(idp, "pcmdline",      0x48, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idp, "dwDyingThreads",0x4c, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idp, "oe",            0x50, FF_STRU|FF_DATA, idoe, GetStrucSize(idoe));
AddStrucMember(idp, "e32",           0x60, FF_STRU|FF_DATA, ide32, GetStrucSize(ide32));
AddStrucMember(idp, "o32_ptr",       0xa8, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idp, "pExtPdata",     0xac, FF_DWRD|FF_DATA, 0, 4);
AddStrucMember(idp, "bPrio",         0xb0, FF_BYTE|FF_DATA, 0, 1);
AddStrucMember(idp, "fNoDebug",      0xb1, FF_BYTE|FF_DATA, 0, 1);
if (wm5) {
    AddStrucMember(idp, "wModCount",          0xb2, FF_WORD|FF_DATA, 0, 2);
}
else {
    AddStrucMember(idp, "wPad",          0xb2, FF_WORD|FF_DATA, 0, 2);
}
AddStrucMember(idp, "pgqueue",       0xb4, FF_STRU|FF_DATA, idpgp, GetStrucSize(idpgp));
if (wm5) {
    AddStrucMember(idp, "pLastModList", 0xc4, FF_DWRD|FF_DATA, 0, 4);
    AddStrucMember(idp, "hTok", 0xc8, FF_DWRD|FF_DATA, 0, 4);
#define HARDWARE_PT_PER_PROC 8
    AddStrucMember(idp, "pPTBL", 0xcc, FF_DWRD|FF_DATA, 0, 4*8);
    AddStrucMember(idp, "pShimInfo", 0xec, FF_DWRD|FF_DATA, 0, 4);
}

}
/*
.... cv exception handlers to dwords
auto ea,eea; ea=0x80041000;
while (ea!=BADADDR) {
  ea=FindBinary(ea, 0x23, "8004dc70");
  if (ea!=BADADDR && ea<=0x80090000) {
      Message("%08lx: %08lx %08lx\n", ea, Dword(ea), Dword(ea+4));
      for (eea=ea ; eea<ea+8 ; eea=eea+1) {
          MakeUnkn(eea, 0);
      }
      MakeDword(ea);
      MakeArray(ea, 2);
  }
}
*/

static is_wm5()
{
    return 1;
}
static main()
{
   fix4033();
   SegCreate(0xffffc800, 0xffffc800+0x800, 0, 1, 4, 0);
   SegCreate(0xf0008000, 0xf0008000+0x8100, 0, 1, 4, 0);
   mkkdata();
   mk_syscalls();
   mk_structs5();
   mk_structs(is_wm5());
   mk_APIS("APIS", 2, 6);
   mk_Wn32("Wn32", 3, 0);
   mk_THRD("THRD", 2, 1);
   mk_PROC("PROC", 2, 2);
   mk_EVNT("EVNT", 2, 4);
   mk_MUTX("MUTX", 2, 5);
   mk_SEMP("SEMP", 2, 13);
   mk_FMAP("FMAP", 2, 14);
}
